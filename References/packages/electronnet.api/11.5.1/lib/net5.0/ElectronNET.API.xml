<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ElectronNET.API</name>
    </assembly>
    <members>
        <member name="T:ElectronNET.API.App">
            <summary>
            Control your application's event lifecycle.
            </summary>
        </member>
        <member name="E:ElectronNET.API.App.WindowAllClosed">
            <summary>
            Emitted when all windows have been closed.
            <para/>
            If you do not subscribe to this event and all windows are closed, the default behavior is to quit
            the app; however, if you subscribe, you control whether the app quits or not.If the user pressed
            Cmd + Q, or the developer called <see cref="M:ElectronNET.API.App.Quit"/>, Electron will first try to close all the windows
            and then emit the <see cref="E:ElectronNET.API.App.WillQuit"/> event, and in this case the <see cref="E:ElectronNET.API.App.WindowAllClosed"/> event
            would not be emitted.
            </summary>
        </member>
        <member name="E:ElectronNET.API.App.BeforeQuit">
            <summary>
            Emitted before the application starts closing its windows. 
            <para/>
            Note: If application quit was initiated by <see cref="M:ElectronNET.API.AutoUpdater.QuitAndInstall(System.Boolean,System.Boolean)"/> then <see cref="E:ElectronNET.API.App.BeforeQuit"/>
            is emitted after emitting close event on all windows and closing them.
            <para/>
            Note: On Windows, this event will not be emitted if the app is closed due to a shutdown/restart of the system or a user logout.
            </summary>
        </member>
        <member name="E:ElectronNET.API.App.WillQuit">
            <summary>
            Emitted when all windows have been closed and the application will quit.
            <para/>
            See the description of the <see cref="E:ElectronNET.API.App.WindowAllClosed"/> event for the differences between the <see cref="E:ElectronNET.API.App.WillQuit"/>
            and <see cref="E:ElectronNET.API.App.WindowAllClosed"/> events.
            <para/>
            Note: On Windows, this event will not be emitted if the app is closed due to a shutdown/restart of the system or a user logout.
            </summary>
        </member>
        <member name="E:ElectronNET.API.App.Quitting">
            <summary>
            Emitted when the application is quitting.
            <para/>
            Note: On Windows, this event will not be emitted if the app is closed due to a shutdown/restart of the system or a user logout.
            </summary>
        </member>
        <member name="E:ElectronNET.API.App.BrowserWindowBlur">
            <summary>
            Emitted when a <see cref="T:ElectronNET.API.BrowserWindow"/> blurred.
            </summary>
        </member>
        <member name="E:ElectronNET.API.App.BrowserWindowFocus">
            <summary>
            Emitted when a <see cref="T:ElectronNET.API.BrowserWindow"/> gets focused.
            </summary>
        </member>
        <member name="E:ElectronNET.API.App.BrowserWindowCreated">
            <summary>
            Emitted when a new <see cref="T:ElectronNET.API.BrowserWindow"/> is created.
            </summary>
        </member>
        <member name="E:ElectronNET.API.App.WebContentsCreated">
            <summary>
            Emitted when a new <see cref="T:ElectronNET.API.WebContents"/> is created.
            </summary>
        </member>
        <member name="E:ElectronNET.API.App.AccessibilitySupportChanged">
            <summary>
            Emitted when Chrome’s accessibility support changes. This event fires when assistive technologies, such as
            screen readers, are enabled or disabled. See https://www.chromium.org/developers/design-documents/accessibility for more details.
            </summary>
            <returns><see langword="true"/> when Chrome's accessibility support is enabled, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="E:ElectronNET.API.App.Ready">
            <summary>
            Emitted when the application has finished basic startup.
            </summary>
        </member>
        <member name="P:ElectronNET.API.App.IsReady">
            <summary>
            Application host fully started.
            </summary>
        </member>
        <member name="E:ElectronNET.API.App.OpenFile">
            <summary>
            Emitted when a MacOS user wants to open a file with the application. The open-file event is usually emitted
            when the application is already open and the OS wants to reuse the application to open the file.
            open-file is also emitted when a file is dropped onto the dock and the application is not yet running.
            <para/>
            On Windows, you have to parse the arguments using App.CommandLine to get the filepath.
            </summary>
        </member>
        <member name="E:ElectronNET.API.App.OpenUrl">
            <summary>
            Emitted when a MacOS user wants to open a URL with the application. Your application's Info.plist file must
            define the URL scheme within the CFBundleURLTypes key, and set NSPrincipalClass to AtomApplication.
            </summary>
        </member>
        <member name="P:ElectronNET.API.App.Name">
             <summary>
             A <see cref="T:System.String"/> property that indicates the current application's name, which is the name in the
             application's package.json file.
            
             Usually the name field of package.json is a short lowercase name, according to the npm modules spec. You
             should usually also specify a productName field, which is your application's full capitalized name, and
             which will be preferred over name by Electron.
             </summary>
        </member>
        <member name="P:ElectronNET.API.App.NameAsync">
             <summary>
             A <see cref="T:System.String"/> property that indicates the current application's name, which is the name in the
             application's package.json file.
            
             Usually the name field of package.json is a short lowercase name, according to the npm modules spec. You
             should usually also specify a productName field, which is your application's full capitalized name, and
             which will be preferred over name by Electron.
             </summary>
        </member>
        <member name="M:ElectronNET.API.App.Quit">
            <summary>
            Try to close all windows. The <see cref="E:ElectronNET.API.App.BeforeQuit"/> event will be emitted first. If all windows are successfully
            closed, the <see cref="E:ElectronNET.API.App.WillQuit"/> event will be emitted and by default the application will terminate. This method
            guarantees that all beforeunload and unload event handlers are correctly executed. It is possible
            that a window cancels the quitting by returning <see langword="false"/> in the beforeunload event handler.
            </summary>
        </member>
        <member name="M:ElectronNET.API.App.Exit(System.Int32)">
            <summary>
            All windows will be closed immediately without asking user and the <see cref="E:ElectronNET.API.App.BeforeQuit"/> and <see cref="E:ElectronNET.API.App.WillQuit"/>
            events will not be emitted.
            </summary>
            <param name="exitCode">Exits immediately with exitCode. exitCode defaults to 0.</param>
        </member>
        <member name="M:ElectronNET.API.App.Relaunch">
            <summary>
            Relaunches the app when current instance exits. By default the new instance will use the same working directory
            and command line arguments with current instance.
            <para/>
            Note that this method does not quit the app when executed, you have to call <see cref="M:ElectronNET.API.App.Quit"/> or <see cref="M:ElectronNET.API.App.Exit(System.Int32)"/>
            after calling <see cref="M:ElectronNET.API.App.Relaunch"/> to make the app restart.
            <para/>
            When <see cref="M:ElectronNET.API.App.Relaunch"/> is called for multiple times, multiple instances will be started after current instance
            exited.
            </summary>
        </member>
        <member name="M:ElectronNET.API.App.Relaunch(ElectronNET.API.Entities.RelaunchOptions)">
            <summary>
            Relaunches the app when current instance exits. By default the new instance will use the same working directory
            and command line arguments with current instance. When <see cref="P:ElectronNET.API.Entities.RelaunchOptions.Args"/> is specified, the
            <see cref="P:ElectronNET.API.Entities.RelaunchOptions.Args"/> will be passed as command line arguments instead. When <see cref="P:ElectronNET.API.Entities.RelaunchOptions.ExecPath"/>
            is specified, the <see cref="P:ElectronNET.API.Entities.RelaunchOptions.ExecPath"/> will be executed for relaunch instead of current app.
            <para/>
            Note that this method does not quit the app when executed, you have to call <see cref="M:ElectronNET.API.App.Quit"/> or <see cref="M:ElectronNET.API.App.Exit(System.Int32)"/>
            after calling <see cref="M:ElectronNET.API.App.Relaunch"/> to make the app restart.
            <para/>
            When <see cref="M:ElectronNET.API.App.Relaunch"/> is called for multiple times, multiple instances will be started after current instance
            exited.
            </summary>
            <param name="relaunchOptions">Options for the relaunch.</param>
        </member>
        <member name="M:ElectronNET.API.App.Focus">
            <summary>
            On Linux, focuses on the first visible window. On macOS, makes the application the active app. On Windows, focuses
            on the application's first window.
            </summary>
        </member>
        <member name="M:ElectronNET.API.App.Focus(ElectronNET.API.Entities.FocusOptions)">
            <summary>
            On Linux, focuses on the first visible window. On macOS, makes the application the active app. On Windows, focuses
            on the application's first window.
            <para/>
            You should seek to use the <see cref="P:ElectronNET.API.Entities.FocusOptions.Steal"/> option as sparingly as possible.
            </summary>
        </member>
        <member name="M:ElectronNET.API.App.Hide">
            <summary>
            Hides all application windows without minimizing them.
            </summary>
        </member>
        <member name="M:ElectronNET.API.App.Show">
            <summary>
            Shows application windows after they were hidden. Does not automatically focus them.
            </summary>
        </member>
        <member name="M:ElectronNET.API.App.GetAppPathAsync(System.Threading.CancellationToken)">
            <summary>
            The current application directory.
            </summary>
        </member>
        <member name="M:ElectronNET.API.App.SetAppLogsPath(System.String)">
            <summary>
            Sets or creates a directory your app's logs which can then be manipulated with <see cref="M:ElectronNET.API.App.GetPathAsync(ElectronNET.API.Entities.PathName,System.Threading.CancellationToken)"/>
            or <see cref="M:ElectronNET.API.App.SetPath(ElectronNET.API.Entities.PathName,System.String)"/>.
            <para/>
            Calling <see cref="M:ElectronNET.API.App.SetAppLogsPath(System.String)"/> without a path parameter will result in this directory being set to
            ~/Library/Logs/YourAppName on macOS, and inside the userData directory on Linux and Windows.
            </summary>
            <param name="path">A custom path for your logs. Must be absolute.</param>
        </member>
        <member name="M:ElectronNET.API.App.GetPathAsync(ElectronNET.API.Entities.PathName,System.Threading.CancellationToken)">
            <summary>
            The path to a special directory. If <see cref="M:ElectronNET.API.App.GetPathAsync(ElectronNET.API.Entities.PathName,System.Threading.CancellationToken)"/> is called without called
            <see cref="M:ElectronNET.API.App.SetAppLogsPath(System.String)"/> being called first, a default directory will be created equivalent
            to calling <see cref="M:ElectronNET.API.App.SetAppLogsPath(System.String)"/> without a path parameter.
            </summary>
            <param name="pathName">Special directory.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A path to a special directory or file associated with name.</returns>
        </member>
        <member name="M:ElectronNET.API.App.SetPath(ElectronNET.API.Entities.PathName,System.String)">
            <summary>
            Overrides the path to a special directory or file associated with name. If the path specifies a directory
            that does not exist, an Error is thrown. In that case, the directory should be created with fs.mkdirSync or similar.
            <para/>
            You can only override paths of a name defined in <see cref="M:ElectronNET.API.App.GetPathAsync(ElectronNET.API.Entities.PathName,System.Threading.CancellationToken)"/>.
            <para/>
            By default, web pages' cookies and caches will be stored under the <see cref="F:ElectronNET.API.Entities.PathName.UserData"/> directory. If you
            want to change this location, you have to override the <see cref="F:ElectronNET.API.Entities.PathName.UserData"/> path before the <see cref="E:ElectronNET.API.App.Ready"/>
            event of the <see cref="T:ElectronNET.API.App"/> module is emitted.
            <param name="name">Special directory.</param>
            <param name="path">New path to a special directory.</param>
            </summary>
        </member>
        <member name="M:ElectronNET.API.App.GetVersionAsync(System.Threading.CancellationToken)">
            <summary>
            The version of the loaded application. If no version is found in the application’s package.json file, 
            the version of the current bundle or executable is returned.
            </summary>
            <returns>The version of the loaded application.</returns>
        </member>
        <member name="M:ElectronNET.API.App.GetLocaleAsync(System.Threading.CancellationToken)">
            <summary>
            The current application locale. Possible return values are documented <see href="https://www.electronjs.org/docs/api/locales">here</see>.
            <para/>
            Note: When distributing your packaged app, you have to also ship the locales folder.
            <para/>
            Note: On Windows, you have to call it after the <see cref="E:ElectronNET.API.App.Ready"/> events gets emitted.
            </summary>
            <returns>The current application locale.</returns>
        </member>
        <member name="M:ElectronNET.API.App.AddRecentDocument(System.String)">
            <summary>
            Adds path to the recent documents list. This list is managed by the OS. On Windows you can visit the
            list from the task bar, and on macOS you can visit it from dock menu.
            </summary>
            <param name="path">Path to add.</param>
        </member>
        <member name="M:ElectronNET.API.App.ClearRecentDocuments">
            <summary>
            Clears the recent documents list.
            </summary>
        </member>
        <member name="M:ElectronNET.API.App.SetAsDefaultProtocolClientAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the current executable as the default handler for a protocol (aka URI scheme). It allows you to
            integrate your app deeper into the operating system. Once registered, all links with your-protocol://
            will be opened with the current executable. The whole link, including protocol, will be passed to your
            application as a parameter.
            <para/>
            Note: On macOS, you can only register protocols that have been added to your app's info.plist, which
            cannot be modified at runtime. However, you can change the file during build time via
            <see href="https://www.electronforge.io/">Electron Forge</see>,
            <see href="https://github.com/electron/electron-packager">Electron Packager</see>, or by editing info.plist
            with a text editor. Please refer to
            <see href="https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/TP40009249-102207-TPXREF115">Apple's documentation</see>
            for details.
            <para/>
            Note: In a Windows Store environment (when packaged as an appx) this API will return true for all calls but
            the registry key it sets won't be accessible by other applications. In order to register your Windows Store
            application as a default protocol handler you <see href="https://docs.microsoft.com/en-us/uwp/schemas/appxpackage/uapmanifestschema/element-uap-protocol">must declare the protocol in your manifest</see>.
            <para/>
            The API uses the Windows Registry and LSSetDefaultHandlerForURLScheme internally.
            </summary>
            <param name="protocol">
            The name of your protocol, without ://. For example, if you want your app to handle electron:// links,
            call this method with electron as the parameter.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Whether the call succeeded.</returns>
        </member>
        <member name="M:ElectronNET.API.App.SetAsDefaultProtocolClientAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the current executable as the default handler for a protocol (aka URI scheme). It allows you to
            integrate your app deeper into the operating system. Once registered, all links with your-protocol://
            will be opened with the current executable. The whole link, including protocol, will be passed to your
            application as a parameter.
            <para/>
            Note: On macOS, you can only register protocols that have been added to your app's info.plist, which
            cannot be modified at runtime. However, you can change the file during build time via
            <see href="https://www.electronforge.io/">Electron Forge</see>,
            <see href="https://github.com/electron/electron-packager">Electron Packager</see>, or by editing info.plist
            with a text editor. Please refer to
            <see href="https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/TP40009249-102207-TPXREF115">Apple's documentation</see>
            for details.
            <para/>
            Note: In a Windows Store environment (when packaged as an appx) this API will return true for all calls but
            the registry key it sets won't be accessible by other applications. In order to register your Windows Store
            application as a default protocol handler you <see href="https://docs.microsoft.com/en-us/uwp/schemas/appxpackage/uapmanifestschema/element-uap-protocol">must declare the protocol in your manifest</see>.
            <para/>
            The API uses the Windows Registry and LSSetDefaultHandlerForURLScheme internally.
            </summary>
            <param name="protocol">
            The name of your protocol, without ://. For example, if you want your app to handle electron:// links,
            call this method with electron as the parameter.</param>
            <param name="path">The path to the Electron executable. Defaults to process.execPath</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Whether the call succeeded.</returns>
        </member>
        <member name="M:ElectronNET.API.App.SetAsDefaultProtocolClientAsync(System.String,System.String,System.String[],System.Threading.CancellationToken)">
            <summary>
            Sets the current executable as the default handler for a protocol (aka URI scheme). It allows you to
            integrate your app deeper into the operating system. Once registered, all links with your-protocol://
            will be opened with the current executable. The whole link, including protocol, will be passed to your
            application as a parameter.
            <para/>
            Note: On macOS, you can only register protocols that have been added to your app's info.plist, which
            cannot be modified at runtime. However, you can change the file during build time via
            <see href="https://www.electronforge.io/">Electron Forge</see>,
            <see href="https://github.com/electron/electron-packager">Electron Packager</see>, or by editing info.plist
            with a text editor. Please refer to
            <see href="https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/TP40009249-102207-TPXREF115">Apple's documentation</see>
            for details.
            <para/>
            Note: In a Windows Store environment (when packaged as an appx) this API will return true for all calls but
            the registry key it sets won't be accessible by other applications. In order to register your Windows Store
            application as a default protocol handler you <see href="https://docs.microsoft.com/en-us/uwp/schemas/appxpackage/uapmanifestschema/element-uap-protocol">must declare the protocol in your manifest</see>.
            <para/>
            The API uses the Windows Registry and LSSetDefaultHandlerForURLScheme internally.
            </summary>
            <param name="protocol">
            The name of your protocol, without ://. For example, if you want your app to handle electron:// links,
            call this method with electron as the parameter.</param>
            <param name="path">The path to the Electron executable. Defaults to process.execPath</param>
            <param name="args">Arguments passed to the executable. Defaults to an empty array.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Whether the call succeeded.</returns>
        </member>
        <member name="M:ElectronNET.API.App.RemoveAsDefaultProtocolClientAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            This method checks if the current executable as the default handler for a protocol (aka URI scheme).
            If so, it will remove the app as the default handler.
            </summary>
            <param name="protocol">The name of your protocol, without ://.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Whether the call succeeded.</returns>
        </member>
        <member name="M:ElectronNET.API.App.RemoveAsDefaultProtocolClientAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            This method checks if the current executable as the default handler for a protocol (aka URI scheme).
            If so, it will remove the app as the default handler.
            </summary>
            <param name="protocol">The name of your protocol, without ://.</param>
            <param name="path">Defaults to process.execPath.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Whether the call succeeded.</returns>
        </member>
        <member name="M:ElectronNET.API.App.RemoveAsDefaultProtocolClientAsync(System.String,System.String,System.String[],System.Threading.CancellationToken)">
            <summary>
            This method checks if the current executable as the default handler for a protocol (aka URI scheme).
            If so, it will remove the app as the default handler.
            </summary>
            <param name="protocol">The name of your protocol, without ://.</param>
            <param name="path">Defaults to process.execPath.</param>
            <param name="args">Defaults to an empty array.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Whether the call succeeded.</returns>
        </member>
        <member name="M:ElectronNET.API.App.IsDefaultProtocolClientAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            This method checks if the current executable is the default handler for a protocol (aka URI scheme).
            <para/>
            Note: On macOS, you can use this method to check if the app has been registered as the default protocol
            handler for a protocol. You can also verify this by checking ~/Library/Preferences/com.apple.LaunchServices.plist
            on the macOS machine. Please refer to <see href="https://developer.apple.com/library/mac/documentation/Carbon/Reference/LaunchServicesReference/#//apple_ref/c/func/LSCopyDefaultHandlerForURLScheme">Apple's documentation</see>
            for details.
            <para/>
            The API uses the Windows Registry and LSCopyDefaultHandlerForURLScheme internally.
            </summary>
            <param name="protocol">The name of your protocol, without ://.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Whether the current executable is the default handler for a protocol (aka URI scheme).</returns>
        </member>
        <member name="M:ElectronNET.API.App.IsDefaultProtocolClientAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            This method checks if the current executable is the default handler for a protocol (aka URI scheme).
            <para/>
            Note: On macOS, you can use this method to check if the app has been registered as the default protocol
            handler for a protocol. You can also verify this by checking ~/Library/Preferences/com.apple.LaunchServices.plist
            on the macOS machine. Please refer to <see href="https://developer.apple.com/library/mac/documentation/Carbon/Reference/LaunchServicesReference/#//apple_ref/c/func/LSCopyDefaultHandlerForURLScheme">Apple's documentation</see>
            for details.
            <para/>
            The API uses the Windows Registry and LSCopyDefaultHandlerForURLScheme internally.
            </summary>
            <param name="protocol">The name of your protocol, without ://.</param>
            <param name="path">Defaults to process.execPath.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Whether the current executable is the default handler for a protocol (aka URI scheme).</returns>
        </member>
        <member name="M:ElectronNET.API.App.IsDefaultProtocolClientAsync(System.String,System.String,System.String[],System.Threading.CancellationToken)">
            <summary>
            This method checks if the current executable is the default handler for a protocol (aka URI scheme).
            <para/>
            Note: On macOS, you can use this method to check if the app has been registered as the default protocol
            handler for a protocol. You can also verify this by checking ~/Library/Preferences/com.apple.LaunchServices.plist
            on the macOS machine. Please refer to <see href="https://developer.apple.com/library/mac/documentation/Carbon/Reference/LaunchServicesReference/#//apple_ref/c/func/LSCopyDefaultHandlerForURLScheme">Apple's documentation</see>
            for details.
            <para/>
            The API uses the Windows Registry and LSCopyDefaultHandlerForURLScheme internally.
            </summary>
            <param name="protocol">The name of your protocol, without ://.</param>
            <param name="path">Defaults to process.execPath.</param>
            <param name="args">Defaults to an empty array.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Whether the current executable is the default handler for a protocol (aka URI scheme).</returns>
        </member>
        <member name="M:ElectronNET.API.App.SetUserTasksAsync(ElectronNET.API.Entities.UserTask[],System.Threading.CancellationToken)">
            <summary>
            Adds tasks to the <see cref="T:ElectronNET.API.Entities.UserTask"/> category of the JumpList on Windows.
            <para/>
            Note: If you'd like to customize the Jump List even more use <see cref="M:ElectronNET.API.App.SetJumpList(ElectronNET.API.Entities.JumpListCategory[])"/> instead.
            </summary>
            <param name="userTasks">Array of <see cref="T:ElectronNET.API.Entities.UserTask"/> objects.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Whether the call succeeded.</returns>
        </member>
        <member name="M:ElectronNET.API.App.GetJumpListSettingsAsync(System.Threading.CancellationToken)">
            <summary>
            Jump List settings for the application.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Jump List settings.</returns>
        </member>
        <member name="M:ElectronNET.API.App.SetJumpList(ElectronNET.API.Entities.JumpListCategory[])">
            <summary>
            Sets or removes a custom Jump List for the application. If categories is null the previously set custom
            Jump List (if any) will be replaced by the standard Jump List for the app (managed by Windows).
            <para/>
            Note: If a <see cref="T:ElectronNET.API.Entities.JumpListCategory"/> object has neither the <see cref="P:ElectronNET.API.Entities.JumpListCategory.Type"/> nor
            the <see cref="P:ElectronNET.API.Entities.JumpListCategory.Name"/> property set then its <see cref="P:ElectronNET.API.Entities.JumpListCategory.Type"/> is assumed
            to be <see cref="F:ElectronNET.API.Entities.JumpListCategoryType.tasks"/>. If the <see cref="P:ElectronNET.API.Entities.JumpListCategory.Name"/> property is set but
            the <see cref="P:ElectronNET.API.Entities.JumpListCategory.Type"/> property is omitted then the <see cref="P:ElectronNET.API.Entities.JumpListCategory.Type"/> is
            assumed to be <see cref="F:ElectronNET.API.Entities.JumpListCategoryType.custom"/>.
            <para/>
            Note: Users can remove items from custom categories, and Windows will not allow a removed item to be added
            back into a custom category until after the next successful call to <see cref="M:ElectronNET.API.App.SetJumpList(ElectronNET.API.Entities.JumpListCategory[])"/>. Any attempt
            to re-add a removed item to a custom category earlier than that will result in the entire custom category being
            omitted from the Jump List. The list of removed items can be obtained using <see cref="M:ElectronNET.API.App.GetJumpListSettingsAsync(System.Threading.CancellationToken)"/>.
            </summary>
            <param name="categories">Array of <see cref="T:ElectronNET.API.Entities.JumpListCategory"/> objects.</param>
        </member>
        <member name="M:ElectronNET.API.App.RequestSingleInstanceLockAsync(System.Action{System.String[],System.String},System.Threading.CancellationToken)">
            <summary>
            The return value of this method indicates whether or not this instance of your application successfully obtained
            the lock. If it failed to obtain the lock, you can assume that another instance of your application is already
            running with the lock and exit immediately.
            <para/>
            I.e.This method returns <see langword="true"/> if your process is the primary instance of your application and your
            app should continue loading. It returns <see langword="false"/> if your process should immediately quit as it has
            sent its parameters to another instance that has already acquired the lock.
            <para/>
            On macOS, the system enforces single instance automatically when users try to open a second instance of your app
            in Finder, and the open-file and open-url events will be emitted for that.However when users start your app in
            command line, the system's single instance mechanism will be bypassed, and you have to use this method to ensure
            single instance.
            </summary>
            <param name="newInstanceOpened">Lambda with an array of the second instance’s command line arguments.
            The second parameter is the working directory path.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>This method returns false if your process is the primary instance of the application and your app
            should continue loading. And returns true if your process has sent its parameters to another instance, and
            you should immediately quit.
            </returns>
        </member>
        <member name="M:ElectronNET.API.App.ReleaseSingleInstanceLock">
            <summary>
            Releases all locks that were created by makeSingleInstance. This will allow
            multiple instances of the application to once again run side by side.
            </summary>
        </member>
        <member name="M:ElectronNET.API.App.HasSingleInstanceLockAsync(System.Threading.CancellationToken)">
            <summary>
            This method returns whether or not this instance of your app is currently holding the single instance lock.
            You can request the lock with <see cref="M:ElectronNET.API.App.RequestSingleInstanceLockAsync(System.Action{System.String[],System.String},System.Threading.CancellationToken)"/> and release with
            <see cref="M:ElectronNET.API.App.ReleaseSingleInstanceLock"/>.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:ElectronNET.API.App.SetUserActivity(System.String,System.Object)">
            <summary>
            Creates an NSUserActivity and sets it as the current activity. The activity is
            eligible for <see href="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/Handoff/HandoffFundamentals/HandoffFundamentals.html">Handoff</see>
            to another device afterward.
            </summary>
            <param name="type">Uniquely identifies the activity. Maps to <see href="https://developer.apple.com/library/ios/documentation/Foundation/Reference/NSUserActivity_Class/index.html#//apple_ref/occ/instp/NSUserActivity/activityType">NSUserActivity.activityType</see>.</param>
            <param name="userInfo">App-specific state to store for use by another device.</param>
        </member>
        <member name="M:ElectronNET.API.App.SetUserActivity(System.String,System.Object,System.String)">
            <summary>
            Creates an NSUserActivity and sets it as the current activity. The activity is
            eligible for <see href="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/Handoff/HandoffFundamentals/HandoffFundamentals.html">Handoff</see>
            to another device afterward.
            </summary>
            <param name="type">
            Uniquely identifies the activity. Maps to <see href="https://developer.apple.com/library/ios/documentation/Foundation/Reference/NSUserActivity_Class/index.html#//apple_ref/occ/instp/NSUserActivity/activityType">NSUserActivity.activityType</see>.
            </param>
            <param name="userInfo">App-specific state to store for use by another device.</param>
            <param name="webpageUrl">
            The webpage to load in a browser if no suitable app is installed on the resuming device. The scheme must be http or https.
            </param>
        </member>
        <member name="M:ElectronNET.API.App.GetCurrentActivityTypeAsync(System.Threading.CancellationToken)">
            <summary>
            The type of the currently running activity.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:ElectronNET.API.App.InvalidateCurrentActivity">
            <summary>
            Invalidates the current <see href="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/Handoff/HandoffFundamentals/HandoffFundamentals.html">Handoff</see> user activity.
            </summary>
        </member>
        <member name="M:ElectronNET.API.App.ResignCurrentActivity">
            <summary>
            Marks the current <see href="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/Handoff/HandoffFundamentals/HandoffFundamentals.html">Handoff</see> user activity as inactive without invalidating it.
            </summary>
        </member>
        <member name="M:ElectronNET.API.App.SetAppUserModelId(System.String)">
            <summary>
            Changes the <see href="https://msdn.microsoft.com/en-us/library/windows/desktop/dd378459(v=vs.85).aspx">Application User Model ID</see> to id.
            </summary>
            <param name="id">Model Id.</param>
        </member>
        <member name="M:ElectronNET.API.App.ImportCertificateAsync(ElectronNET.API.Entities.ImportCertificateOptions,System.Threading.CancellationToken)">
            TODO: Check new parameter which is a function [App.ImportCertificate]
            <summary>
            Imports the certificate in pkcs12 format into the platform certificate store.
            callback is called with the result of import operation, a value of 0 indicates
            success while any other value indicates failure according to chromium net_error_list.
            </summary>
            <param name="options"></param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Result of import. Value of 0 indicates success.</returns>
        </member>
        <member name="M:ElectronNET.API.App.GetAppMetricsAsync(System.Threading.CancellationToken)">
            <summary>
            Memory and cpu usage statistics of all the processes associated with the app.
            </summary>
            <returns>
            Array of ProcessMetric objects that correspond to memory and cpu usage
            statistics of all the processes associated with the app.
            <param name="cancellationToken">The cancellation token.</param>
            </returns>
        </member>
        <member name="M:ElectronNET.API.App.GetGpuFeatureStatusAsync(System.Threading.CancellationToken)">
            <summary>
            The Graphics Feature Status from chrome://gpu/.
            <para/>
            Note: This information is only usable after the gpu-info-update event is emitted.
            <param name="cancellationToken">The cancellation token.</param>
            </summary>
        </member>
        <member name="M:ElectronNET.API.App.SetBadgeCountAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Sets the counter badge for current app. Setting the count to 0 will hide the badge.
            On macOS it shows on the dock icon. On Linux it only works for Unity launcher.
            <para/>
            Note: Unity launcher requires the existence of a .desktop file to work, for more
            information please read <see href="https://www.electronjs.org/docs/tutorial/desktop-environment-integration#unity-launcher">Desktop Environment Integration</see>.
            </summary>
            <param name="count">Counter badge.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Whether the call succeeded.</returns>
        </member>
        <member name="M:ElectronNET.API.App.GetBadgeCountAsync(System.Threading.CancellationToken)">
            <summary>
            The current value displayed in the counter badge.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="P:ElectronNET.API.App.CommandLine">
            <summary>
            A <see cref="P:ElectronNET.API.App.CommandLine"/> object that allows you to read and manipulate the command line arguments that Chromium uses.
            </summary>
        </member>
        <member name="M:ElectronNET.API.App.IsUnityRunningAsync(System.Threading.CancellationToken)">
            <summary>
            Whether the current desktop environment is Unity launcher.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:ElectronNET.API.App.GetLoginItemSettingsAsync(System.Threading.CancellationToken)">
            <summary>
            If you provided path and args options to <see cref="M:ElectronNET.API.App.SetLoginItemSettings(ElectronNET.API.Entities.LoginSettings)"/> then you need to pass the same
            arguments here for <see cref="P:ElectronNET.API.Entities.LoginItemSettings.OpenAtLogin"/> to be set correctly.
            </summary>
        </member>
        <member name="M:ElectronNET.API.App.GetLoginItemSettingsAsync(ElectronNET.API.Entities.LoginItemSettingsOptions,System.Threading.CancellationToken)">
            <summary>
            If you provided path and args options to <see cref="M:ElectronNET.API.App.SetLoginItemSettings(ElectronNET.API.Entities.LoginSettings)"/> then you need to pass the same
            arguments here for <see cref="P:ElectronNET.API.Entities.LoginItemSettings.OpenAtLogin"/> to be set correctly.
            </summary>
            <param name="options"></param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:ElectronNET.API.App.SetLoginItemSettings(ElectronNET.API.Entities.LoginSettings)">
            <summary>
            Set the app's login item settings.
            To work with Electron's autoUpdater on Windows, which uses <see href="https://github.com/Squirrel/Squirrel.Windows">Squirrel</see>,
            you'll want to set the launch path to Update.exe, and pass arguments that specify your application name.
            </summary>
            <param name="loginSettings"></param>
        </member>
        <member name="M:ElectronNET.API.App.IsAccessibilitySupportEnabledAsync(System.Threading.CancellationToken)">
            <summary>
            <see langword="true"/> if Chrome's accessibility support is enabled, <see langword="false"/> otherwise. This API will
            return <see langword="true"/> if the use of assistive technologies, such as screen readers, has been detected.
            See <see href="chromium.org/developers/design-documents/accessibility">Chromium's accessibility docs</see> for more details.
            </summary>
            <returns><see langword="true"/> if Chrome’s accessibility support is enabled, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:ElectronNET.API.App.SetAccessibilitySupportEnabled(System.Boolean)">
            <summary>
            Manually enables Chrome's accessibility support, allowing to expose accessibility switch to users in application settings.
            See <see href="chromium.org/developers/design-documents/accessibility">Chromium's accessibility docs</see> for more details.
            Disabled (<see langword="false"/>) by default.
            <para/>
            This API must be called after the <see cref="E:ElectronNET.API.App.Ready"/> event is emitted.
            <para/>
            Note: Rendering accessibility tree can significantly affect the performance of your app. It should not be enabled by default.
            </summary>
            <param name="enabled">Enable or disable <see href="https://developers.google.com/web/fundamentals/accessibility/semantics-builtin/the-accessibility-tree">accessibility tree</see> rendering.</param>
        </member>
        <member name="M:ElectronNET.API.App.ShowAboutPanel">
            <summary>
            Show the app's about panel options. These options can be overridden with
            <see cref="M:ElectronNET.API.App.SetAboutPanelOptions(ElectronNET.API.Entities.AboutPanelOptions)"/>.
            </summary>
        </member>
        <member name="M:ElectronNET.API.App.SetAboutPanelOptions(ElectronNET.API.Entities.AboutPanelOptions)">
            <summary>
            Set the about panel options. This will override the values defined in the app's .plist file on macOS. See the
            <see href="https://developer.apple.com/reference/appkit/nsapplication/1428479-orderfrontstandardaboutpanelwith?language=objc">Apple docs</see>
            for more details. On Linux, values must be set in order to be shown; there are no defaults.
            <para/>
            If you do not set credits but still wish to surface them in your app, AppKit will look for a file named "Credits.html",
            "Credits.rtf", and "Credits.rtfd", in that order, in the bundle returned by the NSBundle class method main. The first file
            found is used, and if none is found, the info area is left blank. See Apple
            <see href="https://developer.apple.com/documentation/appkit/nsaboutpaneloptioncredits?language=objc">documentation</see> for more information.
            </summary>
            <param name="options">About panel options.</param>
        </member>
        <member name="P:ElectronNET.API.App.UserAgentFallback">
            <summary>
            A <see cref="T:System.String"/> which is the user agent string Electron will use as a global fallback.
            <para/>
            This is the user agent that will be used when no user agent is set at the webContents or
            session level. It is useful for ensuring that your entire app has the same user agent. Set to a
            custom value as early as possible in your app's initialization to ensure that your overridden value
            is used.
            </summary>
        </member>
        <member name="P:ElectronNET.API.App.UserAgentFallbackAsync">
            <summary>
            A <see cref="T:System.String"/> which is the user agent string Electron will use as a global fallback.
            <para/>
            This is the user agent that will be used when no user agent is set at the webContents or
            session level. It is useful for ensuring that your entire app has the same user agent. Set to a
            custom value as early as possible in your app's initialization to ensure that your overridden value
            is used.
            </summary>
        </member>
        <member name="M:ElectronNET.API.App.On(System.String,System.Action)">
            <summary>
            Subscribe to an unmapped event on the <see cref="T:ElectronNET.API.App"/> module.
            </summary>
            <param name="eventName">The event name</param>
            <param name="fn">The handler</param>
        </member>
        <member name="M:ElectronNET.API.App.On(System.String,System.Action{System.Object})">
            <summary>
            Subscribe to an unmapped event on the <see cref="T:ElectronNET.API.App"/> module.
            </summary>
            <param name="eventName">The event name</param>
            <param name="fn">The handler</param>
        </member>
        <member name="M:ElectronNET.API.App.Once(System.String,System.Action)">
            <summary>
            Subscribe to an unmapped event on the <see cref="T:ElectronNET.API.App"/> module once.
            </summary>
            <param name="eventName">The event name</param>
            <param name="fn">The handler</param>
        </member>
        <member name="M:ElectronNET.API.App.Once(System.String,System.Action{System.Object})">
            <summary>
            Subscribe to an unmapped event on the <see cref="T:ElectronNET.API.App"/> module once.
            </summary>
            <param name="eventName">The event name</param>
            <param name="fn">The handler</param>
        </member>
        <member name="T:ElectronNET.API.AutoUpdater">
            <summary>
            Enable apps to automatically update themselves. Based on electron-updater.
            </summary>
        </member>
        <member name="P:ElectronNET.API.AutoUpdater.AutoDownload">
            <summary>
            Whether to automatically download an update when it is found. (Default is true)
            </summary>
        </member>
        <member name="P:ElectronNET.API.AutoUpdater.AutoInstallOnAppQuit">
            <summary>
            Whether to automatically install a downloaded update on app quit (if `QuitAndInstall` was not called before).
            
            Applicable only on Windows and Linux.
            </summary>
        </member>
        <member name="P:ElectronNET.API.AutoUpdater.AllowPrerelease">
            <summary>
            *GitHub provider only.* Whether to allow update to pre-release versions. 
            Defaults to "true" if application version contains prerelease components (e.g. "0.12.1-alpha.1", here "alpha" is a prerelease component), otherwise "false".
            
            If "true", downgrade will be allowed("allowDowngrade" will be set to "true").
            </summary>
        </member>
        <member name="P:ElectronNET.API.AutoUpdater.FullChangelog">
            <summary>
            *GitHub provider only.* 
            Get all release notes (from current version to latest), not just the latest (Default is false).
            </summary>
        </member>
        <member name="P:ElectronNET.API.AutoUpdater.AllowDowngrade">
            <summary>
            Whether to allow version downgrade (when a user from the beta channel wants to go back to the stable channel).
            Taken in account only if channel differs (pre-release version component in terms of semantic versioning).
            Default is false.
            </summary>
        </member>
        <member name="P:ElectronNET.API.AutoUpdater.UpdateConfigPath">
            <summary>
            For test only.
            </summary>
        </member>
        <member name="P:ElectronNET.API.AutoUpdater.CurrentVersionAsync">
            <summary>
            The current application version
            </summary>
        </member>
        <member name="P:ElectronNET.API.AutoUpdater.Channel">
            <summary>
            Get the update channel. Not applicable for GitHub. 
            Doesn’t return channel from the update configuration, only if was previously set.
            </summary>
        </member>
        <member name="P:ElectronNET.API.AutoUpdater.ChannelAsync">
            <summary>
            Get the update channel. Not applicable for GitHub. 
            Doesn’t return channel from the update configuration, only if was previously set.
            </summary>
        </member>
        <member name="P:ElectronNET.API.AutoUpdater.RequestHeadersAsync">
            <summary>
            The request headers.
            </summary>
        </member>
        <member name="P:ElectronNET.API.AutoUpdater.RequestHeaders">
            <summary>
            The request headers.
            </summary>
        </member>
        <member name="E:ElectronNET.API.AutoUpdater.OnError">
            <summary>
            Emitted when there is an error while updating.
            </summary>
        </member>
        <member name="E:ElectronNET.API.AutoUpdater.OnCheckingForUpdate">
            <summary>
            Emitted when checking if an update has started.
            </summary>
        </member>
        <member name="E:ElectronNET.API.AutoUpdater.OnUpdateAvailable">
            <summary>
            Emitted when there is an available update. 
            The update is downloaded automatically if AutoDownload is true.
            </summary>
        </member>
        <member name="E:ElectronNET.API.AutoUpdater.OnUpdateNotAvailable">
            <summary>
            Emitted when there is no available update.
            </summary>
        </member>
        <member name="E:ElectronNET.API.AutoUpdater.OnDownloadProgress">
            <summary>
            Emitted on download progress.
            </summary>
        </member>
        <member name="E:ElectronNET.API.AutoUpdater.OnUpdateDownloaded">
            <summary>
            Emitted on download complete.
            </summary>
        </member>
        <member name="M:ElectronNET.API.AutoUpdater.CheckForUpdatesAsync">
            <summary>
            Asks the server whether there is an update.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ElectronNET.API.AutoUpdater.CheckForUpdatesAndNotifyAsync">
            <summary>
            Asks the server whether there is an update.
            
            This will immediately download an update, then install when the app quits.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ElectronNET.API.AutoUpdater.QuitAndInstall(System.Boolean,System.Boolean)">
            <summary>
             Restarts the app and installs the update after it has been downloaded.
             It should only be called after `update-downloaded` has been emitted.
             
             Note: QuitAndInstall() will close all application windows first and only emit `before-quit` event on `app` after that.
             This is different from the normal quit event sequence.
            </summary>
            <param name="isSilent">*windows-only* Runs the installer in silent mode. Defaults to `false`.</param>
            <param name="isForceRunAfter">Run the app after finish even on silent install. Not applicable for macOS. Ignored if `isSilent` is set to `false`.</param>
        </member>
        <member name="M:ElectronNET.API.AutoUpdater.DownloadUpdateAsync">
            <summary>
            Start downloading update manually. You can use this method if "AutoDownload" option is set to "false".
            </summary>
            <returns>Path to downloaded file.</returns>
        </member>
        <member name="M:ElectronNET.API.AutoUpdater.GetFeedURLAsync">
            <summary>
            Feed URL.
            </summary>
            <returns>Feed URL.</returns>
        </member>
        <member name="T:ElectronNET.API.BridgeSettings">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.BridgeSettings.SocketPort">
            <summary>
            Gets the socket port.
            </summary>
            <value>
            The socket port.
            </value>
        </member>
        <member name="P:ElectronNET.API.BridgeSettings.WebPort">
            <summary>
            Gets the web port.
            </summary>
            <value>
            The web port.
            </value>
        </member>
        <member name="T:ElectronNET.API.BrowserView">
            <summary>
            A BrowserView can be used to embed additional web content into a BrowserWindow. 
            It is like a child window, except that it is positioned relative to its owning window. 
            It is meant to be an alternative to the webview tag.
            </summary>
        </member>
        <member name="P:ElectronNET.API.BrowserView.Id">
            <summary>
            Gets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:ElectronNET.API.BrowserView.WebContents">
            <summary>
            Render and control web pages.
            </summary>
        </member>
        <member name="P:ElectronNET.API.BrowserView.Bounds">
            <summary>
            Resizes and moves the view to the supplied bounds relative to the window.
            
            (experimental)
            </summary>
        </member>
        <member name="M:ElectronNET.API.BrowserView.#ctor(System.Int32)">
            <summary>
            BrowserView
            </summary>
        </member>
        <member name="M:ElectronNET.API.BrowserView.SetAutoResize(ElectronNET.API.Entities.AutoResizeOptions)">
            <summary>
            (experimental)
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:ElectronNET.API.BrowserView.SetBackgroundColor(System.String)">
            <summary>
            Color in #aarrggbb or #argb form. The alpha channel is optional.
            
            (experimental)
            </summary>
            <param name="color">Color in #aarrggbb or #argb form. The alpha channel is optional.</param>
        </member>
        <member name="T:ElectronNET.API.BrowserWindow">
            <summary>
            Create and control browser windows.
            </summary>
        </member>
        <member name="P:ElectronNET.API.BrowserWindow.Id">
            <summary>
            Gets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="E:ElectronNET.API.BrowserWindow.OnReadyToShow">
            <summary>
            Emitted when the web page has been rendered (while not being shown) and 
            window can be displayed without a visual flash.
            </summary>
        </member>
        <member name="E:ElectronNET.API.BrowserWindow.OnPageTitleUpdated">
            <summary>
            Emitted when the document changed its title.
            </summary>
        </member>
        <member name="E:ElectronNET.API.BrowserWindow.OnClose">
            <summary>
            Emitted when the window is going to be closed.
            </summary>
        </member>
        <member name="E:ElectronNET.API.BrowserWindow.OnClosed">
            <summary>
            Emitted when the window is closed. 
            After you have received this event you should remove the 
            reference to the window and avoid using it any more.
            </summary>
        </member>
        <member name="E:ElectronNET.API.BrowserWindow.OnSessionEnd">
            <summary>
            Emitted when window session is going to end due to force shutdown or machine restart or session log off.
            </summary>
        </member>
        <member name="E:ElectronNET.API.BrowserWindow.OnUnresponsive">
            <summary>
            Emitted when the web page becomes unresponsive.
            </summary>
        </member>
        <member name="E:ElectronNET.API.BrowserWindow.OnResponsive">
            <summary>
            Emitted when the unresponsive web page becomes responsive again.
            </summary>
        </member>
        <member name="E:ElectronNET.API.BrowserWindow.OnBlur">
            <summary>
            Emitted when the window loses focus.
            </summary>
        </member>
        <member name="E:ElectronNET.API.BrowserWindow.OnFocus">
            <summary>
            Emitted when the window gains focus.
            </summary>
        </member>
        <member name="E:ElectronNET.API.BrowserWindow.OnShow">
            <summary>
            Emitted when the window is shown.
            </summary>
        </member>
        <member name="E:ElectronNET.API.BrowserWindow.OnHide">
            <summary>
            Emitted when the window is hidden.
            </summary>
        </member>
        <member name="E:ElectronNET.API.BrowserWindow.OnMaximize">
            <summary>
            Emitted when window is maximized.
            </summary>
        </member>
        <member name="E:ElectronNET.API.BrowserWindow.OnUnmaximize">
            <summary>
            Emitted when the window exits from a maximized state.
            </summary>
        </member>
        <member name="E:ElectronNET.API.BrowserWindow.OnMinimize">
            <summary>
            Emitted when the window is minimized.
            </summary>
        </member>
        <member name="E:ElectronNET.API.BrowserWindow.OnRestore">
            <summary>
            Emitted when the window is restored from a minimized state.
            </summary>
        </member>
        <member name="E:ElectronNET.API.BrowserWindow.OnResize">
            <summary>
            Emitted when the window is being resized.
            </summary>
        </member>
        <member name="E:ElectronNET.API.BrowserWindow.OnMove">
            <summary>
            Emitted when the window is being moved to a new position.
            
            Note: On macOS this event is just an alias of moved.
            </summary>
        </member>
        <member name="E:ElectronNET.API.BrowserWindow.OnMoved">
            <summary>
            macOS: Emitted once when the window is moved to a new position.
            </summary>
        </member>
        <member name="E:ElectronNET.API.BrowserWindow.OnEnterFullScreen">
            <summary>
            Emitted when the window enters a full-screen state.
            </summary>
        </member>
        <member name="E:ElectronNET.API.BrowserWindow.OnLeaveFullScreen">
            <summary>
            Emitted when the window leaves a full-screen state.
            </summary>
        </member>
        <member name="E:ElectronNET.API.BrowserWindow.OnEnterHtmlFullScreen">
            <summary>
            Emitted when the window enters a full-screen state triggered by HTML API.
            </summary>
        </member>
        <member name="E:ElectronNET.API.BrowserWindow.OnLeaveHtmlFullScreen">
            <summary>
            Emitted when the window leaves a full-screen state triggered by HTML API.
            </summary>
        </member>
        <member name="E:ElectronNET.API.BrowserWindow.OnAppCommand">
            <summary>
            Emitted when an App Command is invoked. These are typically related to 
            keyboard media keys or browser commands, as well as the “Back” button 
            built into some mice on Windows.
            
            Commands are lowercased, underscores are replaced with hyphens, 
            and the APPCOMMAND_ prefix is stripped off.e.g.APPCOMMAND_BROWSER_BACKWARD 
            is emitted as browser-backward.
            </summary>
        </member>
        <member name="E:ElectronNET.API.BrowserWindow.OnScrollTouchBegin">
            <summary>
            Emitted when scroll wheel event phase has begun.
            </summary>
        </member>
        <member name="E:ElectronNET.API.BrowserWindow.OnScrollTouchEnd">
            <summary>
            Emitted when scroll wheel event phase has ended.
            </summary>
        </member>
        <member name="E:ElectronNET.API.BrowserWindow.OnScrollTouchEdge">
            <summary>
            Emitted when scroll wheel event phase filed upon reaching the edge of element.
            </summary>
        </member>
        <member name="E:ElectronNET.API.BrowserWindow.OnSwipe">
            <summary>
            Emitted on 3-finger swipe. Possible directions are up, right, down, left.
            </summary>
        </member>
        <member name="E:ElectronNET.API.BrowserWindow.OnSheetBegin">
            <summary>
            Emitted when the window opens a sheet.
            </summary>
        </member>
        <member name="E:ElectronNET.API.BrowserWindow.OnSheetEnd">
            <summary>
            Emitted when the window has closed a sheet.
            </summary>
        </member>
        <member name="E:ElectronNET.API.BrowserWindow.OnNewWindowForTab">
            <summary>
            Emitted when the native new tab button is clicked.
            </summary>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.Destroy">
            <summary>
            Force closing the window, the unload and beforeunload event won’t be 
            emitted for the web page, and close event will also not be emitted 
            for this window, but it guarantees the closed event will be emitted.
            </summary>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.Close">
            <summary>
            Try to close the window. This has the same effect as a user manually 
            clicking the close button of the window. The web page may cancel the close though. 
            </summary>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.Focus">
            <summary>
            Focuses on the window.
            </summary>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.Blur">
            <summary>
            Removes focus from the window.
            </summary>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.IsFocusedAsync">
            <summary>
            Whether the window is focused.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.IsDestroyedAsync">
            <summary>
            Whether the window is destroyed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.Show">
            <summary>
            Shows and gives focus to the window.
            </summary>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.ShowInactive">
            <summary>
            Shows the window but doesn’t focus on it.
            </summary>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.Hide">
            <summary>
            Hides the window.
            </summary>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.IsVisibleAsync">
            <summary>
            Whether the window is visible to the user.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.IsModalAsync">
            <summary>
            Whether current window is a modal window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.Maximize">
            <summary>
            Maximizes the window. This will also show (but not focus) the window if it isn’t being displayed already.
            </summary>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.Unmaximize">
            <summary>
            Unmaximizes the window.
            </summary>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.IsMaximizedAsync">
            <summary>
            Whether the window is maximized.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.Minimize">
            <summary>
            Minimizes the window. On some platforms the minimized window will be shown in the Dock.
            </summary>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.Restore">
            <summary>
            Restores the window from minimized state to its previous state.
            </summary>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.IsMinimizedAsync">
            <summary>
            Whether the window is minimized.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.SetFullScreen(System.Boolean)">
            <summary>
            Sets whether the window should be in fullscreen mode.
            </summary>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.IsFullScreenAsync">
            <summary>
            Whether the window is in fullscreen mode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.SetAspectRatio(System.Int32,ElectronNET.API.Entities.Size)">
             <summary>
             This will make a window maintain an aspect ratio. The extra size allows a developer to have space, 
             specified in pixels, not included within the aspect ratio calculations. This API already takes into
             account the difference between a window’s size and its content size.
            
             Consider a normal window with an HD video player and associated controls.Perhaps there are 15 pixels
             of controls on the left edge, 25 pixels of controls on the right edge and 50 pixels of controls below
             the player. In order to maintain a 16:9 aspect ratio (standard aspect ratio for HD @1920x1080) within
             the player itself we would call this function with arguments of 16/9 and[40, 50]. The second argument
             doesn’t care where the extra width and height are within the content view–only that they exist. Just 
             sum any extra width and height areas you have within the overall content view.
             </summary>
             <param name="aspectRatio">The aspect ratio to maintain for some portion of the content view.</param>
             <param name="extraSize">The extra size not to be included while maintaining the aspect ratio.</param>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.PreviewFile(System.String)">
            <summary>
            Uses Quick Look to preview a file at a given path.
            </summary>
            <param name="path">The absolute path to the file to preview with QuickLook. This is important as 
            Quick Look uses the file name and file extension on the path to determine the content type of the 
            file to open.</param>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.PreviewFile(System.String,System.String)">
            <summary>
            Uses Quick Look to preview a file at a given path.
            </summary>
            <param name="path">The absolute path to the file to preview with QuickLook. This is important as 
            Quick Look uses the file name and file extension on the path to determine the content type of the 
            file to open.</param>
            <param name="displayname">The name of the file to display on the Quick Look modal view. This is 
            purely visual and does not affect the content type of the file. Defaults to path.</param>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.CloseFilePreview">
            <summary>
            Closes the currently open Quick Look panel.
            </summary>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.SetBounds(ElectronNET.API.Entities.Rectangle)">
            <summary>
            Resizes and moves the window to the supplied bounds
            </summary>
            <param name="bounds"></param>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.SetBounds(ElectronNET.API.Entities.Rectangle,System.Boolean)">
            <summary>
            Resizes and moves the window to the supplied bounds
            </summary>
            <param name="bounds"></param>
            <param name="animate"></param>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.GetBoundsAsync">
            <summary>
            Gets the bounds asynchronous.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.SetContentBounds(ElectronNET.API.Entities.Rectangle)">
            <summary>
            Resizes and moves the window’s client area (e.g. the web page) to the supplied bounds.
            </summary>
            <param name="bounds"></param>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.SetContentBounds(ElectronNET.API.Entities.Rectangle,System.Boolean)">
            <summary>
            Resizes and moves the window’s client area (e.g. the web page) to the supplied bounds.
            </summary>
            <param name="bounds"></param>
            <param name="animate"></param>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.GetContentBoundsAsync">
            <summary>
            Gets the content bounds asynchronous.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.SetSize(System.Int32,System.Int32)">
            <summary>
            Resizes the window to width and height.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.SetSize(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Resizes the window to width and height.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <param name="animate"></param>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.GetSizeAsync">
            <summary>
            Contains the window’s width and height.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.SetContentSize(System.Int32,System.Int32)">
            <summary>
            Resizes the window’s client area (e.g. the web page) to width and height.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.SetContentSize(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Resizes the window’s client area (e.g. the web page) to width and height.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <param name="animate"></param>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.GetContentSizeAsync">
            <summary>
            Contains the window’s client area’s width and height.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.SetMinimumSize(System.Int32,System.Int32)">
            <summary>
            Sets the minimum size of window to width and height.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.GetMinimumSizeAsync">
            <summary>
            Contains the window’s minimum width and height.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.SetMaximumSize(System.Int32,System.Int32)">
            <summary>
            Sets the maximum size of window to width and height.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.GetMaximumSizeAsync">
            <summary>
            Contains the window’s maximum width and height.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.SetResizable(System.Boolean)">
            <summary>
            Sets whether the window can be manually resized by user.
            </summary>
            <param name="resizable"></param>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.IsResizableAsync">
            <summary>
            Whether the window can be manually resized by user.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.SetMovable(System.Boolean)">
            <summary>
            Sets whether the window can be moved by user. On Linux does nothing.
            </summary>
            <param name="movable"></param>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.IsMovableAsync">
            <summary>
            Whether the window can be moved by user.
            
            On Linux always returns true.
            </summary>
            <returns>On Linux always returns true.</returns>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.SetMinimizable(System.Boolean)">
            <summary>
            Sets whether the window can be manually minimized by user. On Linux does nothing.
            </summary>
            <param name="minimizable"></param>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.IsMinimizableAsync">
            <summary>
            Whether the window can be manually minimized by user.
            
            On Linux always returns true.
            </summary>
            <returns>On Linux always returns true.</returns>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.SetMaximizable(System.Boolean)">
            <summary>
            Sets whether the window can be manually maximized by user. On Linux does nothing.
            </summary>
            <param name="maximizable"></param>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.IsMaximizableAsync">
            <summary>
            Whether the window can be manually maximized by user.
            
            On Linux always returns true.
            </summary>
            <returns>On Linux always returns true.</returns>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.SetFullScreenable(System.Boolean)">
            <summary>
            Sets whether the maximize/zoom window button toggles fullscreen mode or maximizes the window.
            </summary>
            <param name="fullscreenable"></param>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.IsFullScreenableAsync">
            <summary>
            Whether the maximize/zoom window button toggles fullscreen mode or maximizes the window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.SetClosable(System.Boolean)">
            <summary>
            Sets whether the window can be manually closed by user. On Linux does nothing.
            </summary>
            <param name="closable"></param>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.IsClosableAsync">
            <summary>
            Whether the window can be manually closed by user.
            
            On Linux always returns true.
            </summary>
            <returns>On Linux always returns true.</returns>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.SetAlwaysOnTop(System.Boolean)">
            <summary>
            Sets whether the window should show always on top of other windows. 
            After setting this, the window is still a normal window, not a toolbox 
            window which can not be focused on.
            </summary>
            <param name="flag"></param>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.SetAlwaysOnTop(System.Boolean,ElectronNET.API.Entities.OnTopLevel)">
            <summary>
            Sets whether the window should show always on top of other windows. 
            After setting this, the window is still a normal window, not a toolbox 
            window which can not be focused on.
            </summary>
            <param name="flag"></param>
            <param name="level">Values include normal, floating, torn-off-menu, modal-panel, main-menu, 
            status, pop-up-menu and screen-saver. The default is floating. 
            See the macOS docs</param>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.SetAlwaysOnTop(System.Boolean,ElectronNET.API.Entities.OnTopLevel,System.Int32)">
            <summary>
            Sets whether the window should show always on top of other windows. 
            After setting this, the window is still a normal window, not a toolbox 
            window which can not be focused on.
            </summary>
            <param name="flag"></param>
            <param name="level">Values include normal, floating, torn-off-menu, modal-panel, main-menu, 
            status, pop-up-menu and screen-saver. The default is floating. 
            See the macOS docs</param>
            <param name="relativeLevel">The number of layers higher to set this window relative to the given level. 
            The default is 0. Note that Apple discourages setting levels higher than 1 above screen-saver.</param>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.IsAlwaysOnTopAsync">
            <summary>
            Whether the window is always on top of other windows.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.Center">
            <summary>
            Moves window to the center of the screen.
            </summary>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.SetPosition(System.Int32,System.Int32)">
            <summary>
            Moves window to x and y.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.SetPosition(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Moves window to x and y.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="animate"></param>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.GetPositionAsync">
            <summary>
            Contains the window’s current position.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.SetTitle(System.String)">
            <summary>
            Changes the title of native window to title.
            </summary>
            <param name="title"></param>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.GetTitleAsync">
            <summary>
            The title of the native window.
            
            Note: The title of web page can be different from the title of the native window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.SetSheetOffset(System.Single)">
            <summary>
            Changes the attachment point for sheets on macOS. 
            By default, sheets are attached just below the window frame, 
            but you may want to display them beneath a HTML-rendered toolbar.
            </summary>
            <param name="offsetY"></param>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.SetSheetOffset(System.Single,System.Single)">
            <summary>
            Changes the attachment point for sheets on macOS. 
            By default, sheets are attached just below the window frame, 
            but you may want to display them beneath a HTML-rendered toolbar.
            </summary>
            <param name="offsetY"></param>
            <param name="offsetX"></param>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.FlashFrame(System.Boolean)">
            <summary>
            Starts or stops flashing the window to attract user’s attention.
            </summary>
            <param name="flag"></param>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.SetSkipTaskbar(System.Boolean)">
            <summary>
            Makes the window not show in the taskbar.
            </summary>
            <param name="skip"></param>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.SetKiosk(System.Boolean)">
            <summary>
            Enters or leaves the kiosk mode.
            </summary>
            <param name="flag"></param>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.IsKioskAsync">
            <summary>
            Whether the window is in kiosk mode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.GetNativeWindowHandle">
            <summary>
            Returns the native type of the handle is HWND on Windows, NSView* on macOS, and Window (unsigned long) on Linux.
            </summary>
            <returns>string of the native handle obtained, HWND on Windows, NSView* on macOS, and Window (unsigned long) on Linux.</returns>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.SetRepresentedFilename(System.String)">
            <summary>
            Sets the pathname of the file the window represents, 
            and the icon of the file will show in window’s title bar.
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.GetRepresentedFilenameAsync">
            <summary>
            The pathname of the file the window represents.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.SetDocumentEdited(System.Boolean)">
            <summary>
            Specifies whether the window’s document has been edited, 
            and the icon in title bar will become gray when set to true.
            </summary>
            <param name="edited"></param>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.IsDocumentEditedAsync">
            <summary>
            Whether the window’s document has been edited.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.FocusOnWebView">
            <summary>
            Focuses the on web view.
            </summary>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.BlurWebView">
            <summary>
            Blurs the web view.
            </summary>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.LoadURL(System.String)">
            <summary>
            The url can be a remote address (e.g. http://) or 
            a path to a local HTML file using the file:// protocol.
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.LoadURL(System.String,ElectronNET.API.Entities.LoadURLOptions)">
            <summary>
            The url can be a remote address (e.g. http://) or 
            a path to a local HTML file using the file:// protocol.
            </summary>
            <param name="url"></param>
            <param name="options"></param>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.Reload">
            <summary>
            Same as webContents.reload.
            </summary>
        </member>
        <member name="P:ElectronNET.API.BrowserWindow.MenuItems">
            <summary>
            Gets the menu items.
            </summary>
            <value>
            The menu items.
            </value>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.SetMenu(ElectronNET.API.Entities.MenuItem[])">
            <summary>
            Sets the menu as the window’s menu bar, 
            setting it to null will remove the menu bar.
            </summary>
            <param name="menuItems"></param>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.RemoveMenu">
            <summary>
            Remove the window's menu bar.
            </summary>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.SetProgressBar(System.Double)">
            <summary>
            Sets progress value in progress bar. Valid range is [0, 1.0]. Remove progress
            bar when progress smaler as 0; Change to indeterminate mode when progress bigger as 1. On Linux
            platform, only supports Unity desktop environment, you need to specify the
            .desktop file name to desktopName field in package.json.By default, it will
            assume app.getName().desktop.On Windows, a mode can be passed.Accepted values
            are none, normal, indeterminate, error, and paused. If you call setProgressBar
            without a mode set (but with a value within the valid range), normal will be
            assumed.
            </summary>
            <param name="progress"></param>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.SetProgressBar(System.Double,ElectronNET.API.Entities.ProgressBarOptions)">
            <summary>
            Sets progress value in progress bar. Valid range is [0, 1.0]. Remove progress
            bar when progress smaler as 0; Change to indeterminate mode when progress bigger as 1. On Linux
            platform, only supports Unity desktop environment, you need to specify the
            .desktop file name to desktopName field in package.json.By default, it will
            assume app.getName().desktop.On Windows, a mode can be passed.Accepted values
            are none, normal, indeterminate, error, and paused. If you call setProgressBar
            without a mode set (but with a value within the valid range), normal will be
            assumed.
            </summary>
            <param name="progress"></param>
            <param name="progressBarOptions"></param>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.SetHasShadow(System.Boolean)">
            <summary>
            Sets whether the window should have a shadow. On Windows and Linux does nothing.
            </summary>
            <param name="hasShadow"></param>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.HasShadowAsync">
            <summary>
            Whether the window has a shadow.
            
            On Windows and Linux always returns true.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ElectronNET.API.BrowserWindow.ThumbarButtons">
            <summary>
            Gets the thumbar buttons.
            </summary>
            <value>
            The thumbar buttons.
            </value>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.SetThumbarButtonsAsync(ElectronNET.API.Entities.ThumbarButton[])">
            <summary>
            Add a thumbnail toolbar with a specified set of buttons to the thumbnail 
            image of a window in a taskbar button layout. Returns a Boolean object 
            indicates whether the thumbnail has been added successfully.
            
            The number of buttons in thumbnail toolbar should be no greater than 7 due 
            to the limited room.Once you setup the thumbnail toolbar, the toolbar cannot
            be removed due to the platform’s limitation.But you can call the API with an
            empty array to clean the buttons.
            </summary>
            <param name="thumbarButtons"></param>
            <returns>Whether the buttons were added successfully.</returns>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.SetThumbnailClip(ElectronNET.API.Entities.Rectangle)">
            <summary>
            Sets the region of the window to show as the thumbnail image displayed when hovering over
            the window in the taskbar. You can reset the thumbnail to be the entire window by specifying
            an empty region: {x: 0, y: 0, width: 0, height: 0}.
            </summary>
            <param name="rectangle"></param>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.SetThumbnailToolTip(System.String)">
            <summary>
            Sets the toolTip that is displayed when hovering over the window thumbnail in the taskbar.
            </summary>
            <param name="tooltip"></param>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.SetAppDetails(ElectronNET.API.Entities.AppDetailsOptions)">
            <summary>
            Sets the properties for the window’s taskbar button.
            
            Note: relaunchCommand and relaunchDisplayName must always be set together. 
            If one of those properties is not set, then neither will be used.
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.ShowDefinitionForSelection">
            <summary>
            Same as webContents.showDefinitionForSelection().
            </summary>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.SetAutoHideMenuBar(System.Boolean)">
            <summary>
            Sets whether the window menu bar should hide itself automatically. 
            Once set the menu bar will only show when users press the single Alt key.
            
            If the menu bar is already visible, calling setAutoHideMenuBar(true) won’t hide it immediately.
            </summary>
            <param name="hide"></param>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.IsMenuBarAutoHideAsync">
            <summary>
            Whether menu bar automatically hides itself.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.SetMenuBarVisibility(System.Boolean)">
            <summary>
            Sets whether the menu bar should be visible. If the menu bar is auto-hide,
            users can still bring up the menu bar by pressing the single Alt key.
            </summary>
            <param name="visible"></param>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.IsMenuBarVisibleAsync">
            <summary>
            Whether the menu bar is visible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.SetVisibleOnAllWorkspaces(System.Boolean)">
            <summary>
            Sets whether the window should be visible on all workspaces.
            
            Note: This API does nothing on Windows.
            </summary>
            <param name="visible"></param>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.IsVisibleOnAllWorkspacesAsync">
            <summary>
            Whether the window is visible on all workspaces.
            
            Note: This API always returns false on Windows.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.SetIgnoreMouseEvents(System.Boolean)">
            <summary>
            Makes the window ignore all mouse events.
            
            All mouse events happened in this window will be passed to the window 
            below this window, but if this window has focus, it will still receive keyboard events.
            </summary>
            <param name="ignore"></param>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.SetContentProtection(System.Boolean)">
            <summary>
            Prevents the window contents from being captured by other apps.
            
            On macOS it sets the NSWindow’s sharingType to NSWindowSharingNone. 
            On Windows it calls SetWindowDisplayAffinity with WDA_MONITOR.
            </summary>
            <param name="enable"></param>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.SetFocusable(System.Boolean)">
            <summary>
            Changes whether the window can be focused.
            </summary>
            <param name="focusable"></param>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.SetParentWindow(ElectronNET.API.BrowserWindow)">
            <summary>
            Sets parent as current window’s parent window, 
            passing null will turn current window into a top-level window.
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.GetParentWindowAsync">
            <summary>
            The parent window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.GetChildWindowsAsync">
            <summary>
            All child windows.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.SetAutoHideCursor(System.Boolean)">
            <summary>
            Controls whether to hide cursor when typing.
            </summary>
            <param name="autoHide"></param>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.SetVibrancy(ElectronNET.API.Entities.Vibrancy)">
            <summary>
            Adds a vibrancy effect to the browser window. 
            Passing null or an empty string will remove the vibrancy effect on the window.
            </summary>
            <param name="type">Can be appearance-based, light, dark, titlebar, selection, 
            menu, popover, sidebar, medium-light or ultra-dark. 
            See the macOS documentation for more details.</param>
        </member>
        <member name="P:ElectronNET.API.BrowserWindow.WebContents">
            <summary>
            Render and control web pages.
            </summary>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.SetBrowserView(ElectronNET.API.BrowserView)">
            <summary>
            A BrowserView can be used to embed additional web content into a BrowserWindow. 
            It is like a child window, except that it is positioned relative to its owning window. 
            It is meant to be an alternative to the webview tag.
            </summary>
            <param name="browserView"></param>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.AddExtensionAsync(System.String)">
            <summary>
            Adds Chrome extension located at path, and returns extension's name.
            The method will also not return if the extension's manifest is missing or incomplete.
            Note: This API cannot be called before the ready event of the app module is emitted.
            </summary>
            <param name="path">Path to the Chrome extension</param>
            <returns></returns>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.RemoveExtension(System.String)">
            <summary>
            Remove Chrome extension with the specified name.
            Note: This API cannot be called before the ready event of the app module is emitted.
            </summary>
            <param name="name">Name of the Chrome extension to remove</param>
        </member>
        <member name="M:ElectronNET.API.BrowserWindow.GetExtensionsAsync">
            <summary>
            The keys are the extension names and each value is an object containing name and version properties.
            Note: This API cannot be called before the ready event of the app module is emitted.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ElectronNET.API.Clipboard">
            <summary>
            Perform copy and paste operations on the system clipboard.
            </summary>
        </member>
        <member name="M:ElectronNET.API.Clipboard.ReadTextAsync(System.String)">
            <summary>
            Read the content in the clipboard as plain text.
            </summary>
            <param name="type"></param>
            <returns>The content in the clipboard as plain text.</returns>
        </member>
        <member name="M:ElectronNET.API.Clipboard.WriteText(System.String,System.String)">
            <summary>
            Writes the text into the clipboard as plain text.
            </summary>
            <param name="text"></param>
            <param name="type"></param>
        </member>
        <member name="M:ElectronNET.API.Clipboard.ReadHTMLAsync(System.String)">
            <summary>
            The content in the clipboard as markup.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:ElectronNET.API.Clipboard.WriteHTML(System.String,System.String)">
            <summary>
            Writes markup to the clipboard.
            </summary>
            <param name="markup"></param>
            <param name="type"></param>
        </member>
        <member name="M:ElectronNET.API.Clipboard.ReadRTFAsync(System.String)">
            <summary>
            The content in the clipboard as RTF.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:ElectronNET.API.Clipboard.WriteRTF(System.String,System.String)">
            <summary>
            Writes the text into the clipboard in RTF.
            </summary>
            <param name="text"></param>
            <param name="type"></param>
        </member>
        <member name="M:ElectronNET.API.Clipboard.ReadBookmarkAsync">
            <summary>
            Returns an Object containing title and url keys representing 
            the bookmark in the clipboard. The title and url values will 
            be empty strings when the bookmark is unavailable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ElectronNET.API.Clipboard.WriteBookmark(System.String,System.String,System.String)">
            <summary>
            Writes the title and url into the clipboard as a bookmark.
            
            Note: Most apps on Windows don’t support pasting bookmarks
            into them so you can use clipboard.write to write both a 
            bookmark and fallback text to the clipboard.
            </summary>
            <param name="title"></param>
            <param name="url"></param>
            <param name="type"></param>
        </member>
        <member name="M:ElectronNET.API.Clipboard.ReadFindTextAsync">
            <summary>
            macOS: The text on the find pasteboard. This method uses synchronous IPC
            when called from the renderer process. The cached value is reread from the
            find pasteboard whenever the application is activated.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ElectronNET.API.Clipboard.WriteFindText(System.String)">
            <summary>
            macOS: Writes the text into the find pasteboard as plain text. This method uses 
            synchronous IPC when called from the renderer process.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:ElectronNET.API.Clipboard.Clear(System.String)">
            <summary>
            Clears the clipboard content.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:ElectronNET.API.Clipboard.AvailableFormatsAsync(System.String)">
            <summary>
            An array of supported formats for the clipboard type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:ElectronNET.API.Clipboard.Write(ElectronNET.API.Entities.Data,System.String)">
            <summary>
            Writes data to the clipboard.
            </summary>
            <param name="data"></param>
            <param name="type"></param>
        </member>
        <member name="M:ElectronNET.API.Clipboard.ReadImageAsync(System.String)">
            <summary>
            Reads an image from the clipboard.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:ElectronNET.API.Clipboard.WriteImage(ElectronNET.API.Entities.NativeImage,System.String)">
            <summary>
            Writes an image to the clipboard.
            </summary>
            <param name="image"></param>
            <param name="type"></param>
        </member>
        <member name="T:ElectronNET.API.CommandLine">
            <summary>
            Manipulate the command line arguments for your app that Chromium reads.
            </summary>
        </member>
        <member name="M:ElectronNET.API.CommandLine.AppendSwitch(System.String,System.String)">
            <summary>
            Append a switch (with optional value) to Chromium's command line.
            </summary>
            <param name="the_switch">A command-line switch, without the leading --</param>
            <param name="value">(optional) - A value for the given switch</param>
            <remarks>
            Note: This will not affect process.argv. The intended usage of this function is to control Chromium's behavior.
            </remarks>
        </member>
        <member name="M:ElectronNET.API.CommandLine.AppendArgument(System.String)">
             <summary>
             Append an argument to Chromium's command line. The argument will be quoted correctly. Switches will precede arguments regardless of appending order.
            
             If you're appending an argument like <code>--switch=value</code>, consider using <code>appendSwitch('switch', 'value')</code> instead.
             </summary>
             <param name="value">The argument to append to the command line</param>
             <remarks>
             Note: This will not affect process.argv. The intended usage of this function is to control Chromium's behavior.
             </remarks>
        </member>
        <member name="M:ElectronNET.API.CommandLine.HasSwitchAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Whether the command-line switch is present.
            </summary>
            <param name="switchName">A command-line switch</param>
            <param name="cancellationToken"></param>
            <returns>Whether the command-line switch is present.</returns>
        </member>
        <member name="M:ElectronNET.API.CommandLine.GetSwitchValueAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            The command-line switch value.
            </summary>
            <param name="switchName">A command-line switch</param>
            <param name="cancellationToken"></param>
            <returns>The command-line switch value.</returns>
            <remarks>
            Note: When the switch is not present or has no value, it returns empty string.
            </remarks>
        </member>
        <member name="T:ElectronNET.API.Cookies">
            <summary>
            Query and modify a session's cookies.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Cookies.Id">
            <summary>
            Gets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="E:ElectronNET.API.Cookies.OnChanged">
            <summary>
            Emitted when a cookie is changed because it was added, edited, removed, or expired.
            </summary>
        </member>
        <member name="M:ElectronNET.API.Cookies.GetAsync(ElectronNET.API.Entities.CookieFilter)">
            <summary>
            Sends a request to get all cookies matching filter, and resolves a callack with the response.
            </summary>
            <param name="filter">
            </param>
            <returns>A task which resolves an array of cookie objects.</returns>
        </member>
        <member name="M:ElectronNET.API.Cookies.SetAsync(ElectronNET.API.Entities.CookieDetails)">
            <summary>
            
            </summary>
            <param name="details"></param>
            <returns></returns>
        </member>
        <member name="M:ElectronNET.API.Cookies.RemoveAsync(System.String,System.String)">
            <summary>
            Removes the cookies matching url and name
            </summary>
            <param name="url">The URL associated with the cookie.</param>
            <param name="name">The name of cookie to remove.</param>
            <returns>A task which resolves when the cookie has been removed</returns>
        </member>
        <member name="M:ElectronNET.API.Cookies.FlushStoreAsync">
            <summary>
            Writes any unwritten cookies data to disk.
            </summary>
            <returns>A task which resolves when the cookie store has been flushed</returns>
        </member>
        <member name="T:ElectronNET.API.Dialog">
            <summary>
            Display native system dialogs for opening and saving files, alerting, etc.
            </summary>
        </member>
        <member name="M:ElectronNET.API.Dialog.ShowOpenDialogAsync(ElectronNET.API.BrowserWindow,ElectronNET.API.Entities.OpenDialogOptions)">
            <summary>
            Note: On Windows and Linux an open dialog can not be both a file selector 
            and a directory selector, so if you set properties to ['openFile', 'openDirectory'] 
            on these platforms, a directory selector will be shown.
            </summary>
            <param name="browserWindow">The browserWindow argument allows the dialog to attach itself to a parent window, making it modal.</param>
            <param name="options"></param>
            <returns>An array of file paths chosen by the user</returns>
        </member>
        <member name="M:ElectronNET.API.Dialog.ShowSaveDialogAsync(ElectronNET.API.BrowserWindow,ElectronNET.API.SaveDialogOptions)">
            <summary>
            Dialog for save files.
            </summary>
            <param name="browserWindow">The browserWindow argument allows the dialog to attach itself to a parent window, making it modal.</param>
            <param name="options"></param>
            <returns>Returns String, the path of the file chosen by the user, if a callback is provided it returns an empty string.</returns>
        </member>
        <member name="M:ElectronNET.API.Dialog.ShowMessageBoxAsync(System.String)">
            <summary>
            Shows a message box, it will block the process until the message box is closed.
            It returns the index of the clicked button. The browserWindow argument allows
            the dialog to attach itself to a parent window, making it modal. If a callback
            is passed, the dialog will not block the process.The API call will be
            asynchronous and the result will be passed via callback(response).
            </summary>
            <param name="message"></param>
            <returns>The API call will be asynchronous and the result will be passed via MessageBoxResult.</returns>
        </member>
        <member name="M:ElectronNET.API.Dialog.ShowMessageBoxAsync(ElectronNET.API.Entities.MessageBoxOptions)">
            <summary>
            Shows a message box, it will block the process until the message box is closed.
            It returns the index of the clicked button. The browserWindow argument allows
            the dialog to attach itself to a parent window, making it modal. If a callback
            is passed, the dialog will not block the process.The API call will be
            asynchronous and the result will be passed via callback(response).
            </summary>
            <param name="messageBoxOptions"></param>
            <returns>The API call will be asynchronous and the result will be passed via MessageBoxResult.</returns>
        </member>
        <member name="M:ElectronNET.API.Dialog.ShowMessageBoxAsync(ElectronNET.API.BrowserWindow,System.String)">
            <summary>
            Shows a message box, it will block the process until the message box is closed.
            It returns the index of the clicked button. If a callback
            is passed, the dialog will not block the process.
            </summary>
            <param name="browserWindow">The browserWindow argument allows the dialog to attach itself to a parent window, making it modal.</param>
            <param name="message"></param>
            <returns>The API call will be asynchronous and the result will be passed via MessageBoxResult.</returns>
        </member>
        <member name="M:ElectronNET.API.Dialog.ShowMessageBoxAsync(ElectronNET.API.BrowserWindow,ElectronNET.API.Entities.MessageBoxOptions)">
            <summary>
            Shows a message box, it will block the process until the message box is closed.
            It returns the index of the clicked button. If a callback
            is passed, the dialog will not block the process.
            </summary>
            <param name="browserWindow">The browserWindow argument allows the dialog to attach itself to a parent window, making it modal.</param>
            <param name="messageBoxOptions"></param>
            <returns>The API call will be asynchronous and the result will be passed via MessageBoxResult.</returns>
        </member>
        <member name="M:ElectronNET.API.Dialog.ShowErrorBox(System.String,System.String)">
            <summary>
            Displays a modal dialog that shows an error message.
            
            This API can be called safely before the ready event the app module emits, 
            it is usually used to report errors in early stage of startup.If called 
            before the app readyevent on Linux, the message will be emitted to stderr, 
            and no GUI dialog will appear.
            </summary>
            <param name="title">The title to display in the error box.</param>
            <param name="content">The text content to display in the error box.</param>
        </member>
        <member name="M:ElectronNET.API.Dialog.ShowCertificateTrustDialogAsync(ElectronNET.API.Entities.CertificateTrustDialogOptions)">
            <summary>
            On macOS, this displays a modal dialog that shows a message and certificate information,
            and gives the user the option of trusting/importing the certificate. If you provide a 
            browserWindow argument the dialog will be attached to the parent window, making it modal.
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:ElectronNET.API.Dialog.ShowCertificateTrustDialogAsync(ElectronNET.API.BrowserWindow,ElectronNET.API.Entities.CertificateTrustDialogOptions)">
            <summary>
            On macOS, this displays a modal dialog that shows a message and certificate information,
            and gives the user the option of trusting/importing the certificate. If you provide a 
            browserWindow argument the dialog will be attached to the parent window, making it modal.
            </summary>
            <param name="browserWindow"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:ElectronNET.API.Dock">
            <summary>
            Control your app in the macOS dock.
            </summary>
        </member>
        <member name="M:ElectronNET.API.Dock.BounceAsync(ElectronNET.API.Entities.DockBounceType,System.Threading.CancellationToken)">
            <summary>
            When <see cref="F:ElectronNET.API.Entities.DockBounceType.Critical"/> is passed, the dock icon will bounce until either the application becomes
            active or the request is canceled. When <see cref="F:ElectronNET.API.Entities.DockBounceType.Informational"/> is passed, the dock icon will bounce
            for one second. However, the request remains active until either the application becomes active or the request is canceled.
            <para/>
            Note: This method can only be used while the app is not focused; when the app is focused it will return -1.
            </summary>
            <param name="type">Can be critical or informational. The default is informational.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Return an ID representing the request.</returns>
        </member>
        <member name="M:ElectronNET.API.Dock.CancelBounce(System.Int32)">
            <summary>
            Cancel the bounce of id.
            </summary>
            <param name="id">Id of the request.</param>
        </member>
        <member name="M:ElectronNET.API.Dock.DownloadFinished(System.String)">
            <summary>
            Bounces the Downloads stack if the filePath is inside the Downloads folder.
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:ElectronNET.API.Dock.SetBadge(System.String)">
            <summary>
            Sets the string to be displayed in the dock’s badging area.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:ElectronNET.API.Dock.GetBadgeAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the string to be displayed in the dock’s badging area.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The badge string of the dock.</returns>
        </member>
        <member name="M:ElectronNET.API.Dock.Hide">
            <summary>
            Hides the dock icon.
            </summary>
        </member>
        <member name="M:ElectronNET.API.Dock.Show">
            <summary>
            Shows the dock icon.
            </summary>
        </member>
        <member name="M:ElectronNET.API.Dock.IsVisibleAsync(System.Threading.CancellationToken)">
            <summary>
            Whether the dock icon is visible. The app.dock.show() call is asynchronous
            so this method might not return true immediately after that call.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Whether the dock icon is visible.</returns>
        </member>
        <member name="P:ElectronNET.API.Dock.MenuItems">
            <summary>
            Gets the dock menu items.
            </summary>
            <value>
            The menu items.
            </value>
        </member>
        <member name="M:ElectronNET.API.Dock.SetMenu(ElectronNET.API.Entities.MenuItem[])">
            <summary>
            Sets the application's dock menu.
            </summary>
        </member>
        <member name="M:ElectronNET.API.Dock.GetMenu(System.Threading.CancellationToken)">
            <summary>
            TODO: Menu (macOS) still to be implemented
            Gets the application's dock menu.
            </summary>
        </member>
        <member name="M:ElectronNET.API.Dock.SetIcon(System.String)">
            <summary>
            Sets the image associated with this dock icon.
            </summary>
            <param name="image"></param>
        </member>
        <member name="T:ElectronNET.API.Electron">
            <summary>
            The Electron.NET API
            </summary>
        </member>
        <member name="P:ElectronNET.API.Electron.IpcMain">
            <summary>
            Communicate asynchronously from the main process to renderer processes.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Electron.App">
            <summary>
            Control your application's event lifecycle.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Electron.AutoUpdater">
            <summary>
            Enable apps to automatically update themselves. Based on electron-updater.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Electron.WindowManager">
            <summary>
            Control your windows.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Electron.Menu">
            <summary>
            Create native application menus and context menus.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Electron.Dialog">
            <summary>
            Display native system dialogs for opening and saving files, alerting, etc.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Electron.Notification">
            <summary>
            Create OS desktop notifications
            </summary>
        </member>
        <member name="P:ElectronNET.API.Electron.Tray">
            <summary>
            Add icons and context menus to the system’s notification area.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Electron.GlobalShortcut">
            <summary>
            Detect keyboard events when the application does not have keyboard focus.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Electron.Shell">
            <summary>
            Manage files and URLs using their default applications.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Electron.Screen">
            <summary>
            Retrieve information about screen size, displays, cursor position, etc.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Electron.Clipboard">
            <summary>
            Perform copy and paste operations on the system clipboard.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Electron.HostHook">
            <summary>
            Allows you to execute native JavaScript/TypeScript code from the host process.
            
            It is only possible if the Electron.NET CLI has previously added an 
            ElectronHostHook directory:
            <c>electronize add HostHook</c>
            </summary>
        </member>
        <member name="P:ElectronNET.API.Electron.PowerMonitor">
            <summary>
            Allows you to execute native Lock and Unlock process.       
            </summary>
        </member>
        <member name="P:ElectronNET.API.Electron.NativeTheme">
            <summary>
            Read and respond to changes in Chromium's native color theme.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Electron.Dock">
            <summary>
            Control your app in the macOS dock.
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.AboutPanelOptions">
            <summary>
            About panel options.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.AboutPanelOptions.ApplicationName">
            <summary>
            The app's name.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.AboutPanelOptions.ApplicationVersion">
            <summary>
            The app's version.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.AboutPanelOptions.Copyright">
            <summary>
            Copyright information.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.AboutPanelOptions.Version">
            <summary>
            The app's build version number.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.AboutPanelOptions.Credits">
            <summary>
            Credit information.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.AboutPanelOptions.Authors">
            <summary>
            List of app authors.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.AboutPanelOptions.Website">
            <summary>
            The app's website.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.AboutPanelOptions.IconPath">
            <summary>
            Path to the app's icon. On Linux, will be shown as 64x64 pixels while retaining aspect ratio.
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.AddRepresentationOptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.AddRepresentationOptions.Width">
            <summary>
            Gets or sets the width
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.AddRepresentationOptions.Height">
            <summary>
            Gets or sets the height
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.AddRepresentationOptions.ScaleFactor">
            <summary>
            Gets or sets the scalefactor
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.AddRepresentationOptions.Buffer">
            <summary>
            Gets or sets the buffer
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.AddRepresentationOptions.DataUrl">
            <summary>
            Gets or sets the dataURL
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.AppDetailsOptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.AppDetailsOptions.AppId">
            <summary>
            Window’s App User Model ID. It has to be set, otherwise the other options will have no effect.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.AppDetailsOptions.AppIconPath">
            <summary>
            Window’s Relaunch Icon.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.AppDetailsOptions.AppIconIndex">
            <summary>
            Index of the icon in appIconPath. Ignored when appIconPath is not set. Default is 0.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.AppDetailsOptions.RelaunchCommand">
            <summary>
            Window’s Relaunch Command.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.AppDetailsOptions.RelaunchDisplayName">
            <summary>
            Window’s Relaunch Display Name.
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.AutoResizeOptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.AutoResizeOptions.Width">
            <summary>
            If `true`, the view's width will grow and shrink together with the window.
            `false` by default.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.AutoResizeOptions.Height">
            <summary>
            If `true`, the view's height will grow and shrink together with the window.
            `false` by default.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.AutoResizeOptions.Horizontal">
            <summary>
            If `true`, the view's x position and width will grow and shrink proportionally
            with the window. `false` by default.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.AutoResizeOptions.Vertical">
            <summary>
            If `true`, the view's y position and height will grow and shrink proportionally
            with the window. `false` by default.
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.BitmapOptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.BitmapOptions.ScaleFactor">
            <summary>
            Gets or sets the scale factor
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.BlockMapDataHolder">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.BlockMapDataHolder.Size">
            <summary>
            The file size. Used to verify downloaded size (save one HTTP request to get length).
            Also used when block map data is embedded into the file(appimage, windows web installer package).
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.BlockMapDataHolder.BlockMapSize">
            <summary>
            The block map file size. Used when block map data is embedded into the file (appimage, windows web installer package).
            This information can be obtained from the file itself, but it requires additional HTTP request,
            so, to reduce request count, block map size is specified in the update metadata too.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.BlockMapDataHolder.Sha512">
            <summary>
            The file checksum.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.BlockMapDataHolder.IsAdminRightsRequired">
            <summary>
            
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.BrowserViewConstructorOptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.BrowserViewConstructorOptions.WebPreferences">
            <summary>
            See BrowserWindow.
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.BrowserWindowOptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.BrowserWindowOptions.Width">
            <summary>
            Window's width in pixels. Default is 800.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.BrowserWindowOptions.Height">
            <summary>
            Window's height in pixels. Default is 600.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.BrowserWindowOptions.X">
            <summary>
            ( if y is used) Window's left offset from screen. Default is to center the
            window.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.BrowserWindowOptions.Y">
            <summary>
            ( if x is used) Window's top offset from screen. Default is to center the
            window.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.BrowserWindowOptions.UseContentSize">
            <summary>
            The width and height would be used as web page's size, which means the actual
            window's size will include window frame's size and be slightly larger. Default
            is false.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.BrowserWindowOptions.Center">
            <summary>
            Show window in the center of the screen.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.BrowserWindowOptions.MinWidth">
            <summary>
            Window's minimum width. Default is 0.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.BrowserWindowOptions.MinHeight">
            <summary>
            Window's minimum height. Default is 0.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.BrowserWindowOptions.MaxWidth">
            <summary>
            Window's maximum width. Default is no limit.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.BrowserWindowOptions.MaxHeight">
            <summary>
            Window's maximum height. Default is no limit.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.BrowserWindowOptions.Resizable">
            <summary>
            Whether window is resizable. Default is true.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.BrowserWindowOptions.Movable">
            <summary>
            Whether window is movable. This is not implemented on Linux. Default is true.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.BrowserWindowOptions.Minimizable">
            <summary>
            Whether window is minimizable. This is not implemented on Linux. Default is true.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.BrowserWindowOptions.Maximizable">
            <summary>
            Whether window is maximizable. This is not implemented on Linux. Default is true.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.BrowserWindowOptions.Closable">
            <summary>
            Whether window is closable. This is not implemented on Linux. Default is true.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.BrowserWindowOptions.Focusable">
            <summary>
            Whether the window can be focused. Default is true. On Windows setting
            focusable: false also implies setting skipTaskbar: true. On Linux setting
            focusable: false makes the window stop interacting with wm, so the window will
            always stay on top in all workspaces.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.BrowserWindowOptions.AlwaysOnTop">
            <summary>
            Whether the window should always stay on top of other windows. Default is false.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.BrowserWindowOptions.Fullscreen">
            <summary>
            Whether the window should show in fullscreen. When explicitly set to false the
            fullscreen button will be hidden or disabled on macOS.Default is false.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.BrowserWindowOptions.Fullscreenable">
            <summary>
            Whether the window can be put into fullscreen mode. On macOS, also whether the
            maximize/zoom button should toggle full screen mode or maximize window.Default
            is true.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.BrowserWindowOptions.SkipTaskbar">
            <summary>
            Whether to show the window in taskbar. Default is false.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.BrowserWindowOptions.Kiosk">
            <summary>
            The kiosk mode. Default is false.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.BrowserWindowOptions.Title">
            <summary>
            Default window title. Default is "Electron.NET".
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.BrowserWindowOptions.Icon">
            <summary>
            The window icon. On Windows it is recommended to use ICO icons to get best
            visual effects, you can also leave it undefined so the executable's icon will be used.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.BrowserWindowOptions.Show">
            <summary>
            Whether window should be shown when created. Default is true.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.BrowserWindowOptions.Frame">
            <summary>
            Specify false to create a . Default is true.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.BrowserWindowOptions.Modal">
            <summary>
            Whether this is a modal window. This only works when the window is a child
            window.Default is false.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.BrowserWindowOptions.AcceptFirstMouse">
            <summary>
            Whether the web view accepts a single mouse-down event that simultaneously
            activates the window.Default is false.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.BrowserWindowOptions.DisableAutoHideCursor">
            <summary>
            Whether to hide cursor when typing. Default is false.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.BrowserWindowOptions.AutoHideMenuBar">
            <summary>
            Auto hide the menu bar unless the Alt key is pressed. Default is false.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.BrowserWindowOptions.EnableLargerThanScreen">
            <summary>
            Enable the window to be resized larger than screen. Default is false.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.BrowserWindowOptions.BackgroundColor">
            <summary>
            Window's background color as Hexadecimal value, like #66CD00 or #FFF or
            #80FFFFFF (alpha is supported). Default is #FFF (white).
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.BrowserWindowOptions.HasShadow">
            <summary>
            Whether window should have a shadow. This is only implemented on macOS. Default
            is true.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.BrowserWindowOptions.DarkTheme">
            <summary>
            Forces using dark theme for the window, only works on some GTK+3 desktop
            environments.Default is false.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.BrowserWindowOptions.Transparent">
            <summary>
            Makes the window . Default is false.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.BrowserWindowOptions.Type">
            <summary>
            The type of window, default is normal window.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.BrowserWindowOptions.TitleBarStyle">
            <summary>
            The style of window title bar. Default is default. Possible values are:
            'default' | 'hidden' | 'hiddenInset' | 'customButtonsOnHover'
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.BrowserWindowOptions.FullscreenWindowTitle">
            <summary>
            Shows the title in the tile bar in full screen mode on macOS for all
            titleBarStyle options.Default is false.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.BrowserWindowOptions.ThickFrame">
            <summary>
            Use WS_THICKFRAME style for frameless windows on Windows, which adds standard
            window frame.Setting it to false will remove window shadow and window
            animations. Default is true.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.BrowserWindowOptions.Vibrancy">
            <summary>
            Add a type of vibrancy effect to the window, only on macOS. Can be
            appearance-based, light, dark, titlebar, selection, menu, popover, sidebar,
            medium-light or ultra-dark.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.BrowserWindowOptions.ZoomToPageWidth">
            <summary>
            Controls the behavior on macOS when option-clicking the green stoplight button
            on the toolbar or by clicking the Window > Zoom menu item.If true, the window
            will grow to the preferred width of the web page when zoomed, false will cause
            it to zoom to the width of the screen.This will also affect the behavior when
            calling maximize() directly.Default is false.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.BrowserWindowOptions.TabbingIdentifier">
            <summary>
            Tab group name, allows opening the window as a native tab on macOS 10.12+.
            Windows with the same tabbing identifier will be grouped together.This also
            adds a native new tab button to your window's tab bar and allows your app and
            window to receive the new-window-for-tab event.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.BrowserWindowOptions.WebPreferences">
            <summary>
            Settings of web page's features.
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.Certificate">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.Certificate.Data">
            <summary>
            PEM encoded data
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.Certificate.Fingerprint">
            <summary>
            Fingerprint of the certificate
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.Certificate.Issuer">
            <summary>
            Issuer principal
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.Certificate.IssuerCert">
            <summary>
            Issuer certificate (if not self-signed)
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.Certificate.IssuerName">
            <summary>
            Issuer's Common Name
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.Certificate.SerialNumber">
            <summary>
            Hex value represented string
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.Certificate.Subject">
            <summary>
            Subject principal
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.Certificate.SubjectName">
            <summary>
            Subject's Common Name
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.Certificate.ValidExpiry">
            <summary>
            End date of the certificate being valid in seconds
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.Certificate.ValidStart">
            <summary>
            Start date of the certificate being valid in seconds
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.CertificatePrincipal">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.CertificatePrincipal.CommonName">
            <summary>
            Common Name
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.CertificatePrincipal.Country">
            <summary>
            Country or region
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.CertificatePrincipal.Locality">
            <summary>
            Locality
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.CertificatePrincipal.Organizations">
            <summary>
            Organization names
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.CertificatePrincipal.OrganizationUnits">
            <summary>
            Organization Unit names
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.CertificatePrincipal.State">
            <summary>
            State or province
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.CertificateTrustDialogOptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.CertificateTrustDialogOptions.Certificate">
            <summary>
            The certificate to trust/import.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.CertificateTrustDialogOptions.Message">
            <summary>
            The message to display to the user.
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.ChromeExtensionInfo">
            <summary>
            Provide metadata about the current loaded Chrome extension
            </summary>
        </member>
        <member name="M:ElectronNET.API.Entities.ChromeExtensionInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ElectronNET.API.Entities.ChromeExtensionInfo"/> class.
            </summary>
            <param name="name">The name of the Chrome extension.</param>
            <param name="version">The version of the Chrome extension.</param>
        </member>
        <member name="P:ElectronNET.API.Entities.ChromeExtensionInfo.Name">
            <summary>
            Name of the Chrome extension
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.ChromeExtensionInfo.Version">
            <summary>
            Version of the Chrome extension
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.ClearStorageDataOptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.ClearStorageDataOptions.Origin">
            <summary>
            Should follow window.location.origin’s representation scheme://host:port.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.ClearStorageDataOptions.Storages">
            <summary>
            The types of storages to clear, can contain: appcache, cookies, filesystem,
            indexdb, localstorage, shadercache, websql, serviceworkers, cachestorage.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.ClearStorageDataOptions.Quotas">
            <summary>
            The types of quotas to clear, can contain: temporary, persistent, syncable.
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.Cookie">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.Cookie.Name">
            <summary>
            The name of the cookie.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.Cookie.Value">
            <summary>
            The value of the cookie.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.Cookie.Domain">
            <summary>
            (optional) - The domain of the cookie; this will be normalized with a preceding dot so that it's also valid for subdomains.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.Cookie.HostOnly">
            <summary>
            (optional) - Whether the cookie is a host-only cookie; this will only be true if no domain was passed.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.Cookie.Path">
            <summary>
            (optional) - The path of the cookie.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.Cookie.Secure">
            <summary>
            (optional) - Whether the cookie is marked as secure.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.Cookie.HttpOnly">
            <summary>
            (optional) - Whether the cookie is marked as HTTP only.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.Cookie.Session">
            <summary>
            (optional) - Whether the cookie is a session cookie or a persistent cookie with an expiration date.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.Cookie.ExpirationDate">
            <summary>
            (optional) - The expiration date of the cookie as the number of seconds since the UNIX epoch. Not provided for session cookies.
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.CookieChangedCause">
            <summary>
            The cause of the change 
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.CookieChangedCause.explicit">
             <summary>
            The cookie was changed directly by a consumer's action.
             </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.CookieChangedCause.overwrite">
            <summary>
            The cookie was automatically removed due to an insert operation that overwrote it.
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.CookieChangedCause.expired">
            <summary>
             The cookie was automatically removed as it expired.
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.CookieChangedCause.evicted">
            <summary>
             The cookie was automatically evicted during garbage collection.
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.CookieChangedCause.expiredOverwrite">
            <summary>
              The cookie was overwritten with an already-expired expiration date.
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.CookieDetails">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.CookieDetails.Url">
            <summary>
            The URL to associate the cookie with. The callback will be rejected if the URL is invalid.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.CookieDetails.Name">
            <summary>
            (optional) - The name of the cookie. Empty by default if omitted.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.CookieDetails.Value">
            <summary>
            (optional) - The value of the cookie. Empty by default if omitted.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.CookieDetails.Domain">
            <summary>
            (optional) - The domain of the cookie; this will be normalized with a preceding dot so that it's also valid for subdomains. Empty by default if omitted.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.CookieDetails.Path">
            <summary>
            (optional) - The path of the cookie. Empty by default if omitted.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.CookieDetails.Secure">
            <summary>
            (optional) - Whether the cookie is marked as secure. Defaults to false.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.CookieDetails.HttpOnly">
            <summary>
            (optional) - Whether the cookie is marked as HTTP only. Defaults to false.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.CookieDetails.ExpirationDate">
            <summary>
            (optional) - The expiration date of the cookie as the number of seconds since the UNIX epoch. 
            If omitted then the cookie becomes a session cookie and will not be retained between sessions.
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.CookieFilter">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.CookieFilter.Url">
            <summary>
            (optional) - Retrieves cookies which are associated with url.Empty implies retrieving cookies of all URLs.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.CookieFilter.Name">
            <summary>
            (optional) - Filters cookies by name.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.CookieFilter.Domain">
            <summary>
            (optional) - Retrieves cookies whose domains match or are subdomains of domains.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.CookieFilter.Path">
            <summary>
            (optional) - Retrieves cookies whose path matches path.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.CookieFilter.Secure">
            <summary>
            (optional) - Filters cookies by their Secure property.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.CookieFilter.Session">
            <summary>
            (optional) - Filters out session or persistent cookies.
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.CPUUsage">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.CPUUsage.PercentCPUUsage">
            <summary>
            Percentage of CPU used since the last call to getCPUUsage. First call returns 0.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.CPUUsage.IdleWakeupsPerSecond">
            <summary>
            The number of average idle cpu wakeups per second since the last call to 
            getCPUUsage.First call returns 0.
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.CreateFromBitmapOptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.CreateFromBitmapOptions.Width">
            <summary>
            Gets or sets the width
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.CreateFromBitmapOptions.Height">
            <summary>
            Gets or sets the height
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.CreateFromBitmapOptions.ScaleFactor">
            <summary>
            Gets or sets the scalefactor
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.CreateFromBufferOptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.CreateFromBufferOptions.Width">
            <summary>
            Gets or sets the width
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.CreateFromBufferOptions.Height">
            <summary>
            Gets or sets the height
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.CreateFromBufferOptions.ScaleFactor">
            <summary>
            Gets or sets the scalefactor
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.CreateInterruptedDownloadOptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.CreateInterruptedDownloadOptions.Path">
            <summary>
            Absolute path of the download.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.CreateInterruptedDownloadOptions.UrlChain">
            <summary>
            Complete URL chain for the download.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.CreateInterruptedDownloadOptions.MimeType">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.CreateInterruptedDownloadOptions.Offset">
            <summary>
            Start range for the download.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.CreateInterruptedDownloadOptions.Length">
            <summary>
            Total length of the download.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.CreateInterruptedDownloadOptions.LastModified">
            <summary>
            Last-Modified header value.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.CreateInterruptedDownloadOptions.ETag">
            <summary>
            ETag header value.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.CreateInterruptedDownloadOptions.StartTime">
            <summary>
            Time when download was started in number of seconds since UNIX epoch.
            </summary>
        </member>
        <member name="M:ElectronNET.API.Entities.CreateInterruptedDownloadOptions.#ctor(System.String,System.String[],System.Int32,System.Int32,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="path">Absolute path of the download.</param>
            <param name="urlChain">Complete URL chain for the download.</param>
            <param name="offset">Start range for the download.</param>
            <param name="length">Total length of the download.</param>
            <param name="lastModified">Last-Modified header value.</param>
            <param name="eTag">ETag header value.</param>
        </member>
        <member name="T:ElectronNET.API.Entities.Data">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.Data.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>
            The text.
            </value>
        </member>
        <member name="P:ElectronNET.API.Entities.Data.Html">
            <summary>
            Gets or sets the HTML.
            </summary>
            <value>
            The HTML.
            </value>
        </member>
        <member name="P:ElectronNET.API.Entities.Data.Rtf">
            <summary>
            Gets or sets the RTF.
            </summary>
            <value>
            The RTF.
            </value>
        </member>
        <member name="P:ElectronNET.API.Entities.Data.Bookmark">
            <summary>
            The title of the url at text.
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.DefaultFontFamily">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.DefaultFontFamily.Standard">
            <summary>
            Defaults to Times New Roman.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.DefaultFontFamily.Serif">
            <summary>
            Defaults to Times New Roman.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.DefaultFontFamily.SansSerif">
            <summary>
            Defaults to Arial.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.DefaultFontFamily.Monospace">
            <summary>
            Defaults to Courier New.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.DefaultFontFamily.Cursive">
            <summary>
            Defaults to Script.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.DefaultFontFamily.Fantasy">
            <summary>
            Defaults to Impact.
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.DevToolsMode">
            <summary>
            Opens the devtools with specified dock state, can be right, bottom, undocked,
            detach.Defaults to last used dock state.In undocked mode it's possible to dock
            back.In detach mode it's not.
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.DevToolsMode.right">
            <summary>
            The right
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.DevToolsMode.bottom">
            <summary>
            The bottom
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.DevToolsMode.undocked">
            <summary>
            The undocked
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.DevToolsMode.detach">
            <summary>
            The detach
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.Display">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.Display.Bounds">
            <summary>
            Gets or sets the bounds.
            </summary>
            <value>
            The bounds.
            </value>
        </member>
        <member name="P:ElectronNET.API.Entities.Display.Id">
            <summary>
            Unique identifier associated with the display.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.Display.Rotation">
            <summary>
            Can be 0, 90, 180, 270, represents screen rotation in clock-wise degrees.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.Display.ScaleFactor">
            <summary>
            Output device's pixel scale factor.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.Display.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value>
            The size.
            </value>
        </member>
        <member name="P:ElectronNET.API.Entities.Display.TouchSupport">
            <summary>
            Can be available, unavailable, unknown.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.Display.WorkArea">
            <summary>
            Gets or sets the work area.
            </summary>
            <value>
            The work area.
            </value>
        </member>
        <member name="P:ElectronNET.API.Entities.Display.WorkAreaSize">
            <summary>
            Gets or sets the size of the work area.
            </summary>
            <value>
            The size of the work area.
            </value>
        </member>
        <member name="T:ElectronNET.API.Entities.DockBounceType">
            <summary>
            Defines the DockBounceType enumeration.
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.DockBounceType.Critical">
            <summary>
            Dock icon will bounce until either the application becomes active or the request is canceled.
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.DockBounceType.Informational">
            <summary>
            The dock icon will bounce for one second.
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.EnableNetworkEmulationOptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.EnableNetworkEmulationOptions.Offline">
            <summary>
            Whether to emulate network outage. Defaults to false.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.EnableNetworkEmulationOptions.Latency">
            <summary>
            RTT in ms. Defaults to 0 which will disable latency throttling.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.EnableNetworkEmulationOptions.DownloadThroughput">
            <summary>
            Download rate in Bps. Defaults to 0 which will disable download throttling.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.EnableNetworkEmulationOptions.UploadThroughput">
            <summary>
            Upload rate in Bps. Defaults to 0 which will disable upload throttling.
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.FileFilter">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.FileFilter.Extensions">
            <summary>
            Gets or sets the extensions.
            </summary>
            <value>
            The extensions.
            </value>
        </member>
        <member name="P:ElectronNET.API.Entities.FileFilter.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="T:ElectronNET.API.Entities.FileIconOptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.FileIconOptions.Size">
            <summary>
            Gets the size.
            </summary>
            <value>
            The size.
            </value>
        </member>
        <member name="M:ElectronNET.API.Entities.FileIconOptions.#ctor(ElectronNET.API.Entities.FileIconSize)">
            <summary>
            Initializes a new instance of the <see cref="T:ElectronNET.API.Entities.FileIconOptions"/> class.
            </summary>
            <param name="fileIconSize">Size of the file icon.</param>
        </member>
        <member name="T:ElectronNET.API.Entities.FileIconSize">
            <summary>
            
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.FileIconSize.small">
            <summary>
            The small
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.FileIconSize.normal">
            <summary>
            The normal
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.FileIconSize.large">
            <summary>
            The large
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.FocusOptions">
            <summary>
            Controls the behavior of <see cref="M:ElectronNET.API.App.Focus(ElectronNET.API.Entities.FocusOptions)"/>.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.FocusOptions.Steal">
            <summary>
            Make the receiver the active app even if another app is currently active.
            <para/>
            You should seek to use the <see cref="P:ElectronNET.API.Entities.FocusOptions.Steal"/> option as sparingly as possible.
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.GPUFeatureStatus">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.GPUFeatureStatus.Canvas">
            <summary>
            Canvas.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.GPUFeatureStatus.Flash3D">
            <summary>
            Flash.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.GPUFeatureStatus.FlashStage3D">
            <summary>
            Flash Stage3D.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.GPUFeatureStatus.FlashStage3dBaseline">
            <summary>
            Flash Stage3D Baseline profile.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.GPUFeatureStatus.GpuCompositing">
            <summary>
            Compositing.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.GPUFeatureStatus.MultipleRasterThreads">
            <summary>
            Multiple Raster Threads.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.GPUFeatureStatus.NativeGpuMemoryBuffers">
            <summary>
            Native GpuMemoryBuffers.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.GPUFeatureStatus.Rasterization">
            <summary>
            Rasterization.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.GPUFeatureStatus.VideoDecode">
            <summary>
            Video Decode.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.GPUFeatureStatus.VideoEncode">
            <summary>
            Video Encode.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.GPUFeatureStatus.VpxDecode">
            <summary>
            VPx Video Decode.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.GPUFeatureStatus.Webgl">
            <summary>
            WebGL.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.GPUFeatureStatus.Webgl2">
            <summary>
            WebGL2.
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.ImportCertificateOptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.ImportCertificateOptions.Certificate">
            <summary>
            Path for the pkcs12 file.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.ImportCertificateOptions.Password">
            <summary>
            Passphrase for the certificate.
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.JumpListCategory">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.JumpListCategory.Name">
            <summary>
            Must be set if type is custom, otherwise it should be omitted.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.JumpListCategory.Items">
            <summary>
            Array of objects if type is tasks or custom, otherwise it should be omitted.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.JumpListCategory.Type">
            <summary>
            One of the following: "tasks" | "frequent" | "recent" | "custom"
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.JumpListCategoryType">
            <summary>
            
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.JumpListCategoryType.tasks">
            <summary>
            The tasks
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.JumpListCategoryType.frequent">
            <summary>
            The frequent
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.JumpListCategoryType.recent">
            <summary>
            The recent
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.JumpListCategoryType.custom">
            <summary>
            The custom
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.JumpListItem">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.JumpListItem.Args">
            <summary>
            The command line arguments when program is executed. Should only be set if type is task.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.JumpListItem.Description">
            <summary>
            Description of the task (displayed in a tooltip). Should only be set if type is task.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.JumpListItem.IconIndex">
            <summary>
            The index of the icon in the resource file. If a resource file contains multiple
            icons this value can be used to specify the zero-based index of the icon that
            should be displayed for this task.If a resource file contains only one icon,
            this property should be set to zero.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.JumpListItem.IconPath">
            <summary>
            The absolute path to an icon to be displayed in a Jump List, which can be an
            arbitrary resource file that contains an icon(e.g. .ico, .exe, .dll). You can
            usually specify process.execPath to show the program icon.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.JumpListItem.Path">
            <summary>
            Path of the file to open, should only be set if type is file.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.JumpListItem.Program">
            <summary>
            Path of the program to execute, usually you should specify process.execPath
            which opens the current program.Should only be set if type is task.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.JumpListItem.Title">
            <summary>
            The text to be displayed for the item in the Jump List. Should only be set if type is task.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.JumpListItem.Type">
            <summary>
            One of the following: "task" | "separator" | "file"
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.JumpListItemType">
            <summary>
            
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.JumpListItemType.task">
            <summary>
            The task
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.JumpListItemType.separator">
            <summary>
            The separator
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.JumpListItemType.file">
            <summary>
            The file
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.JumpListSettings">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.JumpListSettings.MinItems">
            <summary>
            The minimum number of items that will be shown in the Jump List (for a more detailed description of this value see the
            <see href="https://msdn.microsoft.com/en-us/library/windows/desktop/dd378398(v=vs.85).aspx">MSDN</see> docs).
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.JumpListSettings.RemovedItems">
            <summary>
            Array of JumpListItem objects that correspond to items that the user has explicitly removed from custom categories
            in the Jump List. These items must not be re-added to the Jump List in the next call to <see cref="M:ElectronNET.API.App.SetJumpList(ElectronNET.API.Entities.JumpListCategory[])"/>, Windows will
            not display any custom category that contains any of the removed items.
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.LoadURLOptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.LoadURLOptions.HttpReferrer">
            <summary>
            A HTTP Referrer url.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.LoadURLOptions.UserAgent">
            <summary>
            A user agent originating the request.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.LoadURLOptions.BaseURLForDataURL">
            <summary>
            Base url (with trailing path separator) for files to be loaded by the data url.
            This is needed only if the specified url is a data url and needs to load other
            files.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.LoadURLOptions.ExtraHeaders">
            <summary>
            Extra headers for the request.
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.LoginItemSettings">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.LoginItemSettings.OpenAtLogin">
            <summary>
            <see langword="true"/> if the app is set to open at login.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.LoginItemSettings.OpenAsHidden">
            <summary>
            <see langword="true"/> if the app is set to open as hidden at login. This setting is not available
            on <see href="https://www.electronjs.org/docs/tutorial/mac-app-store-submission-guide">MAS builds</see>.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.LoginItemSettings.WasOpenedAtLogin">
            <summary>
            <see langword="true"/> if the app was opened at login automatically. This setting is not available
            on <see href="https://www.electronjs.org/docs/tutorial/mac-app-store-submission-guide">MAS builds</see>.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.LoginItemSettings.WasOpenedAsHidden">
            <summary>
            <see langword="true"/> if the app was opened as a hidden login item. This indicates that the app should not
            open any windows at startup. This setting is not available on
            <see href="https://www.electronjs.org/docs/tutorial/mac-app-store-submission-guide">MAS builds</see>.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.LoginItemSettings.RestoreState">
            <summary>
            <see langword="true"/> if the app was opened as a login item that should restore the state from the previous
            session. This indicates that the app should restore the windows that were open the last time the app was closed.
            This setting is not available on <see href="https://www.electronjs.org/docs/tutorial/mac-app-store-submission-guide">MAS builds</see>.
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.LoginItemSettingsOptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.LoginItemSettingsOptions.Path">
            <summary>
            The executable path to compare against. Defaults to process.execPath.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.LoginItemSettingsOptions.Args">
            <summary>
            The command-line arguments to compare against. Defaults to an empty array.
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.LoginSettings">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.LoginSettings.OpenAtLogin">
            <summary>
            <see langword="true"/> to open the app at login, <see langword="false"/> to remove the app as a login item.
            Defaults to <see langword="false"/>.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.LoginSettings.OpenAsHidden">
            <summary>
            <see langword="true"/> to open the app as hidden. Defaults to <see langword="false"/>. The user can edit this
            setting from the System Preferences so app.getLoginItemSettings().wasOpenedAsHidden should be checked when the app is
            opened to know the current value. This setting is not available on <see href="https://www.electronjs.org/docs/tutorial/mac-app-store-submission-guide">MAS builds</see>.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.LoginSettings.Path">
            <summary>
            The executable to launch at login. Defaults to process.execPath.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.LoginSettings.Args">
            <summary>
            The command-line arguments to pass to the executable. Defaults to an empty
            array.Take care to wrap paths in quotes.
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.MemoryInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.MemoryInfo.WorkingSetSize">
            <summary>
            The amount of memory currently pinned to actual physical RAM.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.MemoryInfo.PeakWorkingSetSize">
            <summary>
            The maximum amount of memory that has ever been pinned to actual physical RAM. 
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.MemoryInfo.PrivateBytes">
            <summary>
            The amount of memory not shared by other processes, such as JS heap or HTML
            content.
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.MenuItem">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.MenuItem.Click">
            <summary>
            Will be called with click(menuItem, browserWindow, event) when the menu item is 
            clicked.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.MenuItem.Role">
            <summary>
            Define the action of the menu item, when specified the click property will be
            ignored.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.MenuItem.Type">
            <summary>
            Can be normal, separator, submenu, checkbox or radio.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.MenuItem.Label">
            <summary>
            Gets or sets the label.
            </summary>
            <value>
            The label.
            </value>
        </member>
        <member name="P:ElectronNET.API.Entities.MenuItem.Sublabel">
            <summary>
            Gets or sets the sublabel.
            </summary>
            <value>
            The sublabel.
            </value>
        </member>
        <member name="P:ElectronNET.API.Entities.MenuItem.Accelerator">
            <summary>
            Gets or sets the accelerator.
            </summary>
            <value>
            The accelerator.
            </value>
        </member>
        <member name="P:ElectronNET.API.Entities.MenuItem.Icon">
            <summary>
            Gets or sets the icon.
            </summary>
            <value>
            The icon.
            </value>
        </member>
        <member name="P:ElectronNET.API.Entities.MenuItem.Enabled">
            <summary>
            If false, the menu item will be greyed out and unclickable.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.MenuItem.Visible">
            <summary>
            If false, the menu item will be entirely hidden.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.MenuItem.Checked">
            <summary>
            Should only be specified for checkbox or radio type menu items.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.MenuItem.Submenu">
            <summary>
            Should be specified for submenu type menu items. If submenu is specified, the
            type: 'submenu' can be omitted.If the value is not a Menu then it will be
            automatically converted to one using Menu.buildFromTemplate.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.MenuItem.Id">
            <summary>
            Unique within a single menu. If defined then it can be used as a reference to
            this item by the position attribute.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.MenuItem.Position">
            <summary>
            This field allows fine-grained definition of the specific location within a
            given menu.
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.MenuRole">
            <summary>
            
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.MenuRole.undo">
            <summary>
            The undo
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.MenuRole.redo">
            <summary>
            The redo
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.MenuRole.cut">
            <summary>
            The cut
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.MenuRole.copy">
            <summary>
            The copy
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.MenuRole.paste">
            <summary>
            The paste
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.MenuRole.pasteandmatchstyle">
            <summary>
            The pasteandmatchstyle
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.MenuRole.selectall">
            <summary>
            The selectall
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.MenuRole.delete">
            <summary>
            The delete
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.MenuRole.minimize">
            <summary>
            Minimize current window
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.MenuRole.close">
            <summary>
            Close current window
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.MenuRole.quit">
            <summary>
            Quit the application
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.MenuRole.reload">
            <summary>
            Reload the current window
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.MenuRole.forcereload">
            <summary>
            Reload the current window ignoring the cache.
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.MenuRole.toggledevtools">
            <summary>
            Toggle developer tools in the current window
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.MenuRole.togglefullscreen">
            <summary>
            Toggle full screen mode on the current window
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.MenuRole.resetzoom">
            <summary>
            Reset the focused page’s zoom level to the original size
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.MenuRole.zoomin">
            <summary>
            Zoom in the focused page by 10%
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.MenuRole.zoomout">
            <summary>
            Zoom out the focused page by 10%
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.MenuRole.editMenu">
            <summary>
            Whole default “Edit” menu (Undo, Copy, etc.)
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.MenuRole.windowMenu">
            <summary>
            Whole default “Window” menu (Minimize, Close, etc.)
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.MenuRole.about">
            <summary>
            Only macOS: Map to the orderFrontStandardAboutPanel action
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.MenuRole.hide">
            <summary>
            Only macOS: Map to the hide action
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.MenuRole.hideothers">
            <summary>
            Only macOS: Map to the hideOtherApplications action
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.MenuRole.unhide">
            <summary>
            Only macOS: Map to the unhideAllApplications action
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.MenuRole.startspeaking">
            <summary>
            Only macOS: Map to the startSpeaking action
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.MenuRole.stopspeaking">
            <summary>
            Only macOS: Map to the stopSpeaking action
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.MenuRole.front">
            <summary>
            Only macOS: Map to the arrangeInFront action
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.MenuRole.zoom">
            <summary>
            Only macOS: Map to the performZoom action
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.MenuRole.window">
            <summary>
            Only macOS: The submenu is a “Window” menu
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.MenuRole.help">
            <summary>
            Only macOS: The submenu is a “Help” menu
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.MenuRole.services">
            <summary>
            Only macOS: The submenu is a “Services” menu
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.MenuType">
            <summary>
            
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.MenuType.normal">
            <summary>
            The normal
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.MenuType.separator">
            <summary>
            The separator
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.MenuType.submenu">
            <summary>
            The submenu
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.MenuType.checkbox">
            <summary>
            The checkbox
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.MenuType.radio">
            <summary>
            The radio
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.MessageBoxOptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.MessageBoxOptions.Type">
            <summary>
             Can be "none", "info", "error", "question" or "warning". On Windows, "question"
             displays the same icon as "info", unless you set an icon using the "icon"
             option. On macOS, both "warning" and "error" display the same warning icon.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.MessageBoxOptions.Buttons">
            <summary>
            Array of texts for buttons. On Windows, an empty array will result in one button
            labeled "OK".
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.MessageBoxOptions.DefaultId">
            <summary>
            Index of the button in the buttons array which will be selected by default when
            the message box opens.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.MessageBoxOptions.Title">
            <summary>
            Title of the message box, some platforms will not show it.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.MessageBoxOptions.Message">
            <summary>
            Content of the message box.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.MessageBoxOptions.Detail">
            <summary>
            Extra information of the message.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.MessageBoxOptions.CheckboxLabel">
            <summary>
            If provided, the message box will include a checkbox with the given label. The
            checkbox state can be inspected only when using callback.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.MessageBoxOptions.CheckboxChecked">
            <summary>
            Initial checked state of the checkbox. false by default.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.MessageBoxOptions.Icon">
            <summary>
            Gets or sets the icon.
            </summary>
            <value>
            The icon.
            </value>
        </member>
        <member name="P:ElectronNET.API.Entities.MessageBoxOptions.CancelId">
            <summary>
            The index of the button to be used to cancel the dialog, via the Esc key. By
            default this is assigned to the first button with "cancel" or "no" as the label.
            If no such labeled buttons exist and this option is not set, 0 will be used as
            the return value or callback response. This option is ignored on Windows.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.MessageBoxOptions.NoLink">
            <summary>
            On Windows Electron will try to figure out which one of the buttons are common
            buttons(like "Cancel" or "Yes"), and show the others as command links in the
            dialog.This can make the dialog appear in the style of modern Windows apps. If
            you don't like this behavior, you can set noLink to true.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.MessageBoxOptions.NormalizeAccessKeys">
            <summary>
            Normalize the keyboard access keys across platforms. Default is false. Enabling
            this assumes AND character is used in the button labels for the placement of the keyboard
            shortcut access key and labels will be converted so they work correctly on each
            platform, AND characters are removed on macOS, converted to _ on Linux, and left
            untouched on Windows.For example, a button label of VieANDw will be converted to
            Vie_w on Linux and View on macOS and can be selected via Alt-W on Windows and
            Linux.
            </summary>
        </member>
        <member name="M:ElectronNET.API.Entities.MessageBoxOptions.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ElectronNET.API.Entities.MessageBoxOptions"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:ElectronNET.API.Entities.MessageBoxResult">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.MessageBoxResult.Response">
            <summary>
            Gets or sets the response.
            </summary>
            <value>
            The response.
            </value>
        </member>
        <member name="P:ElectronNET.API.Entities.MessageBoxResult.CheckboxChecked">
            <summary>
            Gets or sets a value indicating whether [checkbox checked].
            </summary>
            <value>
              <c>true</c> if [checkbox checked]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:ElectronNET.API.Entities.MessageBoxType">
            <summary>
            
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.MessageBoxType.none">
            <summary>
            The none
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.MessageBoxType.info">
            <summary>
            The information
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.MessageBoxType.error">
            <summary>
            The error
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.MessageBoxType.question">
            <summary>
            The question
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.MessageBoxType.warning">
            <summary>
            The warning
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.NativeImage">
            <summary>
            Native Image handler for Electron.NET
            </summary>
        </member>
        <member name="M:ElectronNET.API.Entities.NativeImage.CreateEmpty">
            <summary>
            Creates an empty NativeImage
            </summary>
        </member>
        <member name="M:ElectronNET.API.Entities.NativeImage.CreateFromBitmap(System.Drawing.Bitmap,ElectronNET.API.Entities.CreateFromBitmapOptions)">
            <summary>
            
            </summary>
        </member>
        <member name="M:ElectronNET.API.Entities.NativeImage.CreateFromBuffer(System.Byte[],ElectronNET.API.Entities.CreateFromBufferOptions)">
            <summary>
            Creates a NativeImage from a byte array.
            </summary>
        </member>
        <member name="M:ElectronNET.API.Entities.NativeImage.CreateFromDataURL(System.String)">
            <summary>
            Creates a NativeImage from a base64 encoded data URL.
            </summary>
            <param name="dataUrl">A data URL with a base64 encoded image.</param>
        </member>
        <member name="M:ElectronNET.API.Entities.NativeImage.CreateFromPath(System.String)">
            <summary>
            Creates a NativeImage from an image on the disk.
            </summary>
            <param name="path">The path of the image</param>
        </member>
        <member name="M:ElectronNET.API.Entities.NativeImage.#ctor">
            <summary>
            Creates an empty NativeImage
            </summary>
        </member>
        <member name="M:ElectronNET.API.Entities.NativeImage.#ctor(System.Drawing.Image,System.Single)">
            <summary>
            Creates a NativeImage from a bitmap and scale factor
            </summary>
        </member>
        <member name="M:ElectronNET.API.Entities.NativeImage.#ctor(System.Collections.Generic.Dictionary{System.Single,System.Drawing.Image})">
            <summary>
            Creates a NativeImage from a dictionary of scales and images.
            </summary>
        </member>
        <member name="M:ElectronNET.API.Entities.NativeImage.Crop(ElectronNET.API.Entities.Rectangle)">
            <summary>
            Crops the image specified by the input rectangle and computes scale factor
            </summary>
        </member>
        <member name="M:ElectronNET.API.Entities.NativeImage.Resize(ElectronNET.API.Entities.ResizeOptions)">
            <summary>
            Resizes the image and computes scale factor
            </summary>
        </member>
        <member name="M:ElectronNET.API.Entities.NativeImage.AddRepresentation(ElectronNET.API.Entities.AddRepresentationOptions)">
            <summary>
            Add an image representation for a specific scale factor.
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:ElectronNET.API.Entities.NativeImage.GetAspectRatio(System.Single)">
            <summary>
            Gets the aspect ratio for the image based on scale factor
            </summary>
            <param name="scaleFactor">Optional</param>
        </member>
        <member name="M:ElectronNET.API.Entities.NativeImage.GetBitmap(ElectronNET.API.Entities.BitmapOptions)">
            <summary>
            Returns a byte array that contains the image's raw bitmap pixel data.
            </summary>
        </member>
        <member name="M:ElectronNET.API.Entities.NativeImage.GetNativeHandle">
            <summary>
            Returns a byte array that contains the image's raw bitmap pixel data.
            </summary>
        </member>
        <member name="M:ElectronNET.API.Entities.NativeImage.GetSize(System.Single)">
            <summary>
            Gets the size of the specified image based on scale factor
            </summary>
        </member>
        <member name="M:ElectronNET.API.Entities.NativeImage.IsEmpty">
            <summary>
            Checks to see if the NativeImage instance is empty.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.NativeImage.IsTemplateImage">
            <summary>
            Deprecated. Whether the image is a template image.
            </summary>
        </member>
        <member name="M:ElectronNET.API.Entities.NativeImage.SetTemplateImage(System.Boolean)">
            <summary>
            Deprecated. Marks the image as a template image.
            </summary>
        </member>
        <member name="M:ElectronNET.API.Entities.NativeImage.ToBitmap(ElectronNET.API.Entities.ToBitmapOptions)">
            <summary>
            Outputs a bitmap based on the scale factor
            </summary>
        </member>
        <member name="M:ElectronNET.API.Entities.NativeImage.ToDataURL(ElectronNET.API.Entities.ToDataUrlOptions)">
            <summary>
            Outputs a data URL based on the scale factor
            </summary>
        </member>
        <member name="M:ElectronNET.API.Entities.NativeImage.ToJPEG(System.Int32)">
            <summary>
            Outputs a JPEG for the default scale factor
            </summary>
        </member>
        <member name="M:ElectronNET.API.Entities.NativeImage.ToPNG(ElectronNET.API.Entities.ToPNGOptions)">
            <summary>
            Outputs a PNG for the specified scale factor
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.NotificationAction">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.NotificationAction.Text">
            <summary>
            The label for the given action.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.NotificationAction.Type">
            <summary>
            The type of action, can be button.
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.NotificationOptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.NotificationOptions.Title">
            <summary>
            A title for the notification, which will be shown at the top of the notification
            window when it is shown.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.NotificationOptions.SubTitle">
            <summary>
            A subtitle for the notification, which will be displayed below the title.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.NotificationOptions.Body">
            <summary>
            The body text of the notification, which will be displayed below the title or
            subtitle.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.NotificationOptions.Silent">
            <summary>
            Whether or not to emit an OS notification noise when showing the notification.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.NotificationOptions.Icon">
            <summary>
            An icon to use in the notification.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.NotificationOptions.HasReply">
            <summary>
            Whether or not to add an inline reply option to the notification.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.NotificationOptions.TimeoutType">
            <summary>
            The timeout duration of the notification. Can be 'default' or 'never'.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.NotificationOptions.ReplyPlaceholder">
            <summary>
            The placeholder to write in the inline reply input field.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.NotificationOptions.Sound">
            <summary>
            The name of the sound file to play when the notification is shown.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.NotificationOptions.Urgency">
            <summary>
            The urgency level of the notification. Can be 'normal', 'critical', or 'low'.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.NotificationOptions.Actions">
            <summary>
            Actions to add to the notification. Please read the available actions and
            limitations in the NotificationAction documentation.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.NotificationOptions.CloseButtonText">
            <summary>
            A custom title for the close button of an alert. An empty string will cause the
            default localized text to be used.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.NotificationOptions.OnShow">
            <summary>
            Emitted when the notification is shown to the user, note this could be fired
            multiple times as a notification can be shown multiple times through the Show()
            method.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.NotificationOptions.ShowID">
            <summary>
            Gets or sets the show identifier.
            </summary>
            <value>
            The show identifier.
            </value>
        </member>
        <member name="P:ElectronNET.API.Entities.NotificationOptions.OnClick">
            <summary>
            Emitted when the notification is clicked by the user.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.NotificationOptions.ClickID">
            <summary>
            Gets or sets the click identifier.
            </summary>
            <value>
            The click identifier.
            </value>
        </member>
        <member name="P:ElectronNET.API.Entities.NotificationOptions.OnClose">
             <summary>
             Emitted when the notification is closed by manual intervention from the user.
            
             This event is not guarunteed to be emitted in all cases where the notification is closed.
             </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.NotificationOptions.CloseID">
            <summary>
            Gets or sets the close identifier.
            </summary>
            <value>
            The close identifier.
            </value>
        </member>
        <member name="P:ElectronNET.API.Entities.NotificationOptions.OnReply">
            <summary>
            macOS only: Emitted when the user clicks the “Reply” button on a notification with hasReply: true.
            
            The string the user entered into the inline reply field
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.NotificationOptions.ReplyID">
            <summary>
            Gets or sets the reply identifier.
            </summary>
            <value>
            The reply identifier.
            </value>
        </member>
        <member name="P:ElectronNET.API.Entities.NotificationOptions.OnAction">
            <summary>
            macOS only - The index of the action that was activated
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.NotificationOptions.ActionID">
            <summary>
            Gets or sets the action identifier.
            </summary>
            <value>
            The action identifier.
            </value>
        </member>
        <member name="M:ElectronNET.API.Entities.NotificationOptions.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ElectronNET.API.Entities.NotificationOptions"/> class.
            </summary>
            <param name="title">The title.</param>
            <param name="body">The body.</param>
        </member>
        <member name="T:ElectronNET.API.Entities.OnTopLevel">
            <summary>
            
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.OnTopLevel.normal">
            <summary>
            The normal
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.OnTopLevel.floating">
            <summary>
            The floating
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.OnTopLevel.tornOffMenu">
            <summary>
            The torn off menu
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.OnTopLevel.modalPanel">
            <summary>
            The modal panel
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.OnTopLevel.mainMenu">
            <summary>
            The main menu
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.OnTopLevel.status">
            <summary>
            The status
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.OnTopLevel.popUpMenu">
            <summary>
            The pop up menu
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.OnTopLevel.screenSaver">
            <summary>
            The screen saver
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.OpenDevToolsOptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.OpenDevToolsOptions.Mode">
            <summary>
            Opens the devtools with specified dock state, can be right, bottom, undocked,
            detach.Defaults to last used dock state.In undocked mode it's possible to dock
            back.In detach mode it's not.
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.OpenDialogOptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.OpenDialogOptions.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>
            The title.
            </value>
        </member>
        <member name="P:ElectronNET.API.Entities.OpenDialogOptions.DefaultPath">
            <summary>
            Gets or sets the default path.
            </summary>
            <value>
            The default path.
            </value>
        </member>
        <member name="P:ElectronNET.API.Entities.OpenDialogOptions.ButtonLabel">
            <summary>
            Custom label for the confirmation button, when left empty the default label will be used.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.OpenDialogOptions.Properties">
            <summary>
            Contains which features the dialog should use. The following values are supported:
            'openFile' | 'openDirectory' | 'multiSelections' | 'showHiddenFiles' | 'createDirectory' | 'promptToCreate' | 'noResolveAliases' | 'treatPackageAsDirectory'
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.OpenDialogOptions.Message">
            <summary>
            Message to display above input boxes.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.OpenDialogOptions.Filters">
            <summary>
            The filters specifies an array of file types that can be displayed or 
            selected when you want to limit the user to a specific type. For example:
            </summary>
            <example>
            <code>
            new FileFilter[]
            {
             new FileFiler { Name = "Images", Extensions = new string[] { "jpg", "png", "gif" } },
             new FileFiler { Name = "Movies", Extensions = new string[] { "mkv", "avi", "mp4" } },
             new FileFiler { Name = "Custom File Type", Extensions= new string[] {"as" } },
             new FileFiler { Name = "All Files", Extensions= new string[] { "*" } }
            }
            </code>
            </example>
        </member>
        <member name="T:ElectronNET.API.Entities.OpenDialogProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.OpenDialogProperty.openFile">
            <summary>
            The open file
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.OpenDialogProperty.openDirectory">
            <summary>
            The open directory
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.OpenDialogProperty.multiSelections">
            <summary>
            The multi selections
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.OpenDialogProperty.showHiddenFiles">
            <summary>
            The show hidden files
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.OpenDialogProperty.createDirectory">
            <summary>
            The create directory
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.OpenDialogProperty.promptToCreate">
            <summary>
            The prompt to create
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.OpenDialogProperty.noResolveAliases">
            <summary>
            The no resolve aliases
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.OpenDialogProperty.treatPackageAsDirectory">
            <summary>
            The treat package as directory
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.OpenExternalOptions">
            <summary>
            Controls the behavior of OpenExternal.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.OpenExternalOptions.Activate">
            <summary>
            <see langword="true"/> to bring the opened application to the foreground. The default is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.OpenExternalOptions.WorkingDirectory">
            <summary>
            The working directory.
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.PathName">
            <summary>
            Defines the PathName enumeration.
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.PathName.Home">
            <summary>
            User’s home directory.
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.PathName.AppData">
            <summary>
            Per-user application data directory.
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.PathName.UserData">
            <summary>
            The directory for storing your app’s configuration files, 
            which by default it is the appData directory appended with your app’s name.
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.PathName.Temp">
            <summary>
            Temporary directory.
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.PathName.Exe">
            <summary>
            The current executable file.
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.PathName.Module">
            <summary>
            The libchromiumcontent library.
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.PathName.Desktop">
            <summary>
            The current user’s Desktop directory.
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.PathName.Documents">
            <summary>
            Directory for a user’s “My Documents”.
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.PathName.Downloads">
            <summary>
            Directory for a user’s downloads.
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.PathName.Music">
            <summary>
            Directory for a user’s music.
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.PathName.Pictures">
            <summary>
            Directory for a user’s pictures.
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.PathName.Videos">
            <summary>
            Directory for a user’s videos.
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.PathName.Logs">
            <summary>
            The logs.
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.PathName.PepperFlashSystemPlugin">
            <summary>
            Full path to the system version of the Pepper Flash plugin.
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.Point">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.Point.X">
            <summary>
            Gets or sets the x.
            </summary>
            <value>
            The x.
            </value>
        </member>
        <member name="P:ElectronNET.API.Entities.Point.Y">
            <summary>
            Gets or sets the y.
            </summary>
            <value>
            The y.
            </value>
        </member>
        <member name="T:ElectronNET.API.Entities.PrinterInfo">
            <summary>
            Printer info
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.PrinterInfo.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.PrinterInfo.Description">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.PrinterInfo.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.PrinterInfo.IsDefault">
            <summary>
            Is default
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.PrintDpi">
            <summary>
            Print dpi
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.PrintDpi.Horizontal">
            <summary>
            The horizontal dpi
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.PrintDpi.Vertical">
            <summary>
            The vertical dpi
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.PrintPageRange">
            <summary>
            The page range to print
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.PrintPageRange.From">
            <summary>
            From
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.PrintPageRange.To">
            <summary>
            To
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.PrintOptions">
            <summary>
            Print options
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.PrintOptions.Silent">
            <summary>
            Don't ask user for print settings
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.PrintOptions.PrintBackground">
            <summary>
            Prints the background color and image of the web page
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.PrintOptions.DeviceName">
            <summary>
            Set the printer device name to use
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.PrintOptions.Color">
            <summary>
            Set whether the printed web page will be in color or grayscale
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.PrintOptions.MarginsType">
            <summary>
            Specifies the type of margins to use. Uses 0 for default margin, 1 for no
            margin, and 2 for minimum margin.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.PrintOptions.Landscape">
            <summary>
            true for landscape, false for portrait.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.PrintOptions.ScaleFactor">
            <summary>
            The scale factor of the web page
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.PrintOptions.PagesPerSheet">
            <summary>
            The number of pages to print per page sheet
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.PrintOptions.Copies">
            <summary>
            The number of copies of the web page to print
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.PrintOptions.Collate">
            <summary>
            Whether the web page should be collated
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.PrintOptions.PageRanges">
            <summary>
            The page range to print
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.PrintOptions.DuplexMode">
            <summary>
            Set the duplex mode of the printed web page. Can be simplex, shortEdge, or longEdge.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.PrintOptions.Dpi">
            <summary>
            Dpi
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.PrintToPDFOptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.PrintToPDFOptions.MarginsType">
            <summary>
            Specifies the type of margins to use. Uses 0 for default margin, 1 for no
            margin, and 2 for minimum margin.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.PrintToPDFOptions.PageSize">
            <summary>
            Specify page size of the generated PDF. Can be A3, A4, A5, Legal, Letter,
            Tabloid or an Object containing height and width in microns.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.PrintToPDFOptions.PrintBackground">
            <summary>
            Whether to print CSS backgrounds.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.PrintToPDFOptions.PrintSelectionOnly">
            <summary>
            Whether to print selection only.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.PrintToPDFOptions.Landscape">
            <summary>
            true for landscape, false for portrait.
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.ProcessMetric">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.ProcessMetric.PId">
            <summary>
            Process id of the process.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.ProcessMetric.Type">
            <summary>
            Process type (Browser or Tab or GPU etc).
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.ProcessMetric.Cpu">
            <summary>
            CPU usage of the process.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.ProcessMetric.CreationTime">
            <summary>
            Creation time for this process. The time is represented as number of milliseconds since epoch.
            Since the <see cref="P:ElectronNET.API.Entities.ProcessMetric.PId"/> can be reused after a process dies, it is useful to use both the <see cref="P:ElectronNET.API.Entities.ProcessMetric.PId"/>
            and the <see cref="P:ElectronNET.API.Entities.ProcessMetric.CreationTime"/> to uniquely identify a process.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.ProcessMetric.Memory">
            <summary>
            Memory information for the process.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.ProcessMetric.Sandboxed">
            <summary>
            Whether the process is sandboxed on OS level.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.ProcessMetric.IntegrityLevel">
            <summary>
             One of the following values:
            untrusted | low | medium | high | unknown
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.ProgressBarMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.ProgressBarMode.none">
            <summary>
            The none
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.ProgressBarMode.normal">
            <summary>
            The normal
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.ProgressBarMode.indeterminate">
            <summary>
            The indeterminate
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.ProgressBarMode.error">
            <summary>
            The error
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.ProgressBarMode.paused">
            <summary>
            The paused
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.ProgressBarOptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.ProgressBarOptions.Mode">
            <summary>
            Mode for the progress bar. Can be 'none' | 'normal' | 'indeterminate' | 'error' | 'paused'.
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.ProgressInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.ProgressInfo.Progress">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.ProgressInfo.BytesPerSecond">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.ProgressInfo.Percent">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.ProgressInfo.Total">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.ProgressInfo.Transferred">
            <summary>
            
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.ProxyConfig">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.ProxyConfig.PacScript">
            <summary>
            The URL associated with the PAC file.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.ProxyConfig.ProxyRules">
            <summary>
            Rules indicating which proxies to use.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.ProxyConfig.ProxyBypassRules">
            <summary>
            Rules indicating which URLs should bypass the proxy settings.
            </summary>
        </member>
        <member name="M:ElectronNET.API.Entities.ProxyConfig.#ctor(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="pacScript">The URL associated with the PAC file.</param>
            <param name="proxyRules">Rules indicating which proxies to use.</param>
            <param name="proxyBypassRules">Rules indicating which URLs should bypass the proxy settings.</param>
        </member>
        <member name="T:ElectronNET.API.Entities.ReadBookmark">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.ReadBookmark.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>
            The title.
            </value>
        </member>
        <member name="P:ElectronNET.API.Entities.ReadBookmark.Url">
            <summary>
            Gets or sets the URL.
            </summary>
            <value>
            The URL.
            </value>
        </member>
        <member name="T:ElectronNET.API.Entities.Rectangle">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.Rectangle.X">
            <summary>
            Gets or sets the x.
            </summary>
            <value>
            The x.
            </value>
        </member>
        <member name="P:ElectronNET.API.Entities.Rectangle.Y">
            <summary>
            Gets or sets the y.
            </summary>
            <value>
            The y.
            </value>
        </member>
        <member name="P:ElectronNET.API.Entities.Rectangle.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:ElectronNET.API.Entities.Rectangle.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="T:ElectronNET.API.Entities.RelaunchOptions">
            <summary>
            Controls the behavior of <see cref="M:ElectronNET.API.App.Relaunch(ElectronNET.API.Entities.RelaunchOptions)"/>.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.RelaunchOptions.Args">
            <summary>
            Gets or sets the arguments.
            </summary>
            <value>
            The arguments.
            </value>
        </member>
        <member name="P:ElectronNET.API.Entities.RelaunchOptions.ExecPath">
            <summary>
            Gets or sets the execute path.
            </summary>
            <value>
            The execute path.
            </value>
        </member>
        <member name="T:ElectronNET.API.Entities.ReleaseNoteInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.ReleaseNoteInfo.Version">
            <summary>
            The version.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.ReleaseNoteInfo.Note">
            <summary>
            The note.
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.RemovePassword">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.RemovePassword.Origin">
            <summary>
            When provided, the authentication info related to the origin will only be
            removed otherwise the entire cache will be cleared.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.RemovePassword.Password">
            <summary>
            Credentials of the authentication. Must be provided if removing by origin.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.RemovePassword.Realm">
            <summary>
            Realm of the authentication. Must be provided if removing by origin.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.RemovePassword.Scheme">
            <summary>
            Scheme of the authentication. Can be basic, digest, ntlm, negotiate. 
            Must be provided if removing by origin.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.RemovePassword.Type">
            <summary>
            password.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.RemovePassword.Username">
            <summary>
            Credentials of the authentication. Must be provided if removing by origin.
            </summary>
        </member>
        <member name="M:ElectronNET.API.Entities.RemovePassword.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="type">password.</param>
        </member>
        <member name="T:ElectronNET.API.Entities.ResizeOptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.ResizeOptions.Width">
            <summary>
            Gets or sets the width
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.ResizeOptions.Height">
            <summary>
            Gets or sets the height
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.ResizeOptions.Quality">
            <summary>
            good, better, or best. Default is "best";
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.Scheme">
            <summary>
            
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.Scheme.basic">
            <summary>
            
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.Scheme.digest">
            <summary>
            
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.Scheme.ntlm">
            <summary>
            
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.Scheme.negotiate">
            <summary>
            
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.SemVer">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.SemVer.Raw">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.SemVer.Loose">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.SemVer.Options">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.SemVer.Major">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.SemVer.Minor">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.SemVer.Patch">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.SemVer.Version">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.SemVer.Build">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.SemVer.Prerelease">
            <summary>
            
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.SemVerOptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.SemVerOptions.Loose">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.SemVerOptions.IncludePrerelease">
            <summary>
            
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.ShortcutDetails">
            <summary>
            Structure of a shortcut.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.ShortcutDetails.AppUserModelId">
            <summary>
            The Application User Model ID. Default is <see cref="F:System.String.Empty"/>.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.ShortcutDetails.Args">
            <summary>
            The arguments to be applied to <see cref="P:ElectronNET.API.Entities.ShortcutDetails.Target"/> when launching from this shortcut. Default is <see cref="F:System.String.Empty"/>.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.ShortcutDetails.Cwd">
            <summary>
            The working directory. Default is <see cref="F:System.String.Empty"/>.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.ShortcutDetails.Description">
            <summary>
            The description of the shortcut. Default is <see cref="F:System.String.Empty"/>.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.ShortcutDetails.Icon">
            <summary>
            The path to the icon, can be a DLL or EXE. <see cref="P:ElectronNET.API.Entities.ShortcutDetails.Icon"/> and <see cref="P:ElectronNET.API.Entities.ShortcutDetails.IconIndex"/> have to be set
            together. Default is <see cref="F:System.String.Empty"/>, which uses the target's icon.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.ShortcutDetails.IconIndex">
            <summary>
            The resource ID of icon when <see cref="P:ElectronNET.API.Entities.ShortcutDetails.Icon"/> is a DLL or EXE. Default is 0.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.ShortcutDetails.Target">
            <summary>
            The target to launch from this shortcut.
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.ShortcutLinkOperation">
            <summary>
            Defines the ShortcutLinkOperation enumeration.
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.ShortcutLinkOperation.Create">
            <summary>
            Creates a new shortcut, overwriting if necessary.
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.ShortcutLinkOperation.Update">
            <summary>
            Updates specified properties only on an existing shortcut.
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.ShortcutLinkOperation.Replace">
            <summary>
            Overwrites an existing shortcut, fails if the shortcut doesn't exist.
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.Size">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.Size.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:ElectronNET.API.Entities.Size.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="T:ElectronNET.API.Entities.ThemeSourceMode">
            <summary>
            Defines the ThemeSourceMode enumeration.
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.ThemeSourceMode.System">
            <summary>
            Operating system default.
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.ThemeSourceMode.Light">
            <summary>
            Light theme.
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.ThemeSourceMode.Dark">
            <summary>
            Dark theme.
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.ThumbarButton">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.ThumbarButton.Id">
            <summary>
            Gets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:ElectronNET.API.Entities.ThumbarButton.Click">
            <summary>
            Gets or sets the click.
            </summary>
            <value>
            The click.
            </value>
        </member>
        <member name="P:ElectronNET.API.Entities.ThumbarButton.Flags">
            <summary>
            Control specific states and behaviors of the button. By default, it is ["enabled"].
            
            enabled - The button is active and available to the user.
            disabled - The button is disabled.It is present, but has a visual state indicating it will not respond to user action.
            dismissonclick - When the button is clicked, the thumbnail window closes immediately.
            nobackground - Do not draw a button border, use only the image.
            hidden - The button is not shown to the user.
            noninteractive - The button is enabled but not interactive; no pressed button state is drawn.This value is intended for instances where the button is used in a notification.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.ThumbarButton.Icon">
            <summary>
            The icon showing in thumbnail toolbar.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.ThumbarButton.Tooltip">
            <summary>
            The text of the button's tooltip.
            </summary>
        </member>
        <member name="M:ElectronNET.API.Entities.ThumbarButton.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ElectronNET.API.Entities.ThumbarButton"/> class.
            </summary>
            <param name="icon">The icon.</param>
        </member>
        <member name="T:ElectronNET.API.Entities.ThumbarButtonFlag">
            <summary>
            
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.ThumbarButtonFlag.enabled">
            <summary>
            The button is active and available to the user.
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.ThumbarButtonFlag.disabled">
            <summary>
            The button is disabled.It is present, but has a visual state indicating it will not respond to user action.
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.ThumbarButtonFlag.dismissonclick">
            <summary>
            When the button is clicked, the thumbnail window closes immediately.
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.ThumbarButtonFlag.nobackground">
            <summary>
            Do not draw a button border, use only the image.
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.ThumbarButtonFlag.hidden">
            <summary>
            The button is not shown to the user.
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.ThumbarButtonFlag.noninteractive">
            <summary>
            The button is enabled but not interactive; no pressed button state is drawn.This value is intended for instances where the button is used in a notification.
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.TitleBarStyle">
            <summary>
            
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.TitleBarStyle.defaultStyle">
            <summary>
            The default style
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.TitleBarStyle.hidden">
            <summary>
            The hidden
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.TitleBarStyle.hiddenInset">
            <summary>
            The hidden inset
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.TitleBarStyle.customButtonsOnHover">
            <summary>
            The custom buttons on hover
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.ToBitmapOptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.ToBitmapOptions.ScaleFactor">
            <summary>
            Gets or sets the scalefactor
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.ToDataUrlOptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.ToDataUrlOptions.ScaleFactor">
            <summary>
            Gets or sets the scalefactor
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.ToPNGOptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.ToPNGOptions.ScaleFactor">
            <summary>
            Gets or sets the scalefactor
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.UpdateCancellationToken">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.UpdateCancellationToken.Cancelled">
            <summary>
            
            </summary>
        </member>
        <member name="M:ElectronNET.API.Entities.UpdateCancellationToken.Cancel">
            <summary>
            
            </summary>
        </member>
        <member name="M:ElectronNET.API.Entities.UpdateCancellationToken.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.UpdateCheckResult">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.UpdateCheckResult.UpdateInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.UpdateCheckResult.Download">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.UpdateCheckResult.CancellationToken">
            <summary>
            
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.UpdateFileInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.UpdateFileInfo.Url">
            <summary>
            
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.UpdateInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.UpdateInfo.Version">
            <summary>
            The version.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.UpdateInfo.Files">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.UpdateInfo.ReleaseName">
            <summary>
            The release name.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.UpdateInfo.ReleaseNotes">
            <summary>
            The release notes.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.UpdateInfo.ReleaseDate">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.UpdateInfo.StagingPercentage">
            <summary>
            The staged rollout percentage, 0-100.
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.UserTask">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.UserTask.Arguments">
            <summary>
            Gets or sets the arguments.
            </summary>
            <value>
            The arguments.
            </value>
        </member>
        <member name="P:ElectronNET.API.Entities.UserTask.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:ElectronNET.API.Entities.UserTask.IconIndex">
            <summary>
            Gets or sets the index of the icon.
            </summary>
            <value>
            The index of the icon.
            </value>
        </member>
        <member name="P:ElectronNET.API.Entities.UserTask.IconPath">
            <summary>
            Gets or sets the icon path.
            </summary>
            <value>
            The icon path.
            </value>
        </member>
        <member name="P:ElectronNET.API.Entities.UserTask.Program">
            <summary>
            Gets or sets the program.
            </summary>
            <value>
            The program.
            </value>
        </member>
        <member name="P:ElectronNET.API.Entities.UserTask.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>
            The title.
            </value>
        </member>
        <member name="P:ElectronNET.API.Entities.UserTask.WorkingDirectory">
            <summary>
            The working directory. Default is <see cref="F:System.String.Empty"/>.
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.Vibrancy">
            <summary>
            
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.Vibrancy.appearanceBased">
            <summary>
            The appearance based
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.Vibrancy.light">
            <summary>
            The light
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.Vibrancy.dark">
            <summary>
            The dark
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.Vibrancy.titlebar">
            <summary>
            The titlebar
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.Vibrancy.selection">
            <summary>
            The selection
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.Vibrancy.menu">
            <summary>
            The menu
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.Vibrancy.popover">
            <summary>
            The popover
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.Vibrancy.sidebar">
            <summary>
            The sidebar
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.Vibrancy.mediumLight">
            <summary>
            The medium light
            </summary>
        </member>
        <member name="F:ElectronNET.API.Entities.Vibrancy.ultraDark">
            <summary>
            The ultra dark
            </summary>
        </member>
        <member name="T:ElectronNET.API.Entities.WebPreferences">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.WebPreferences.DevTools">
            <summary>
            Whether to enable DevTools. If it is set to false, can not use
            BrowserWindow.webContents.openDevTools() to open DevTools.Default is true.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.WebPreferences.NodeIntegration">
            <summary>
            Whether node integration is enabled. Required to enable IPC. Default is true.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.WebPreferences.NodeIntegrationInWorker">
            <summary>
            Whether node integration is enabled in web workers. Default is false.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.WebPreferences.Preload">
            <summary>
            Specifies a script that will be loaded before other scripts run in the page.
            This script will always have access to node APIs no matter whether node
            integration is turned on or off.The value should be the absolute file path to
            the script. When node integration is turned off, the preload script can
            reintroduce Node global symbols back to the global scope.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.WebPreferences.Sandbox">
            <summary>
            If set, this will sandbox the renderer associated with the window, making it
            compatible with the Chromium OS-level sandbox and disabling the Node.js engine.
            This is not the same as the nodeIntegration option and the APIs available to the
            preload script are more limited. Read more about the option.This option is
            currently experimental and may change or be removed in future Electron releases.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.WebPreferences.Partition">
            <summary>
            Sets the session used by the page according to the session's partition string.
            If partition starts with persist:, the page will use a persistent session
            available to all pages in the app with the same partition.If there is no
            persist: prefix, the page will use an in-memory session. By assigning the same
            partition, multiple pages can share the same session.Default is the default
            session.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.WebPreferences.ZoomFactor">
            <summary>
            The default zoom factor of the page, 3.0 represents 300%. Default is 1.0.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.WebPreferences.Javascript">
            <summary>
            Enables JavaScript support. Default is true.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.WebPreferences.WebSecurity">
            <summary>
            When false, it will disable the same-origin policy (usually using testing
            websites by people), and set allowRunningInsecureContent to true if this options
            has not been set by user. Default is true.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.WebPreferences.AllowRunningInsecureContent">
            <summary>
            Allow an https page to run JavaScript, CSS or plugins from http URLs. Default is
            false.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.WebPreferences.Images">
            <summary>
            Enables image support. Default is true.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.WebPreferences.TextAreasAreResizable">
            <summary>
            Make TextArea elements resizable. Default is true.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.WebPreferences.Webgl">
            <summary>
            Enables WebGL support. Default is true.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.WebPreferences.Webaudio">
            <summary>
            Enables WebAudio support. Default is true.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.WebPreferences.Plugins">
            <summary>
            Whether plugins should be enabled. Default is false.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.WebPreferences.ExperimentalFeatures">
            <summary>
            Enables Chromium's experimental features. Default is false.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.WebPreferences.ExperimentalCanvasFeatures">
            <summary>
            Enables Chromium's experimental canvas features. Default is false.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.WebPreferences.ScrollBounce">
            <summary>
            Enables scroll bounce (rubber banding) effect on macOS. Default is false.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.WebPreferences.EnableBlinkFeatures">
            <summary>
            A list of feature strings separated by ,, like CSSVariables,KeyboardEventKey to
            enable.The full list of supported feature strings can be found in the file.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.WebPreferences.DisableBlinkFeatures">
            <summary>
            A list of feature strings separated by ,, like CSSVariables,KeyboardEventKey to
            disable.The full list of supported feature strings can be found in the file.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.WebPreferences.DefaultFontFamily">
            <summary>
            Sets the default font for the font-family.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.WebPreferences.DefaultFontSize">
            <summary>
            Defaults to 16.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.WebPreferences.DefaultMonospaceFontSize">
            <summary>
            Defaults to 13.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.WebPreferences.MinimumFontSize">
            <summary>
            Defaults to 0.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.WebPreferences.DefaultEncoding">
            <summary>
            Defaults to ISO-8859-1.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.WebPreferences.BackgroundThrottling">
            <summary>
            Whether to throttle animations and timers when the page becomes background. This
            also affects the[Page Visibility API][#page-visibility]. Defaults to true.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.WebPreferences.Offscreen">
            <summary>
            Whether to enable offscreen rendering for the browser window. Defaults to false.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.WebPreferences.ContextIsolation">
            <summary>
            Whether to run Electron APIs and the specified preload script in a separate
            JavaScript context. Defaults to false. The context that the preload script runs
            in will still have full access to the document and window globals but it will
            use its own set of JavaScript builtins (Array, Object, JSON, etc.) and will be
            isolated from any changes made to the global environment by the loaded page.The
            Electron API will only be available in the preload script and not the loaded
            page. This option should be used when loading potentially untrusted remote
            content to ensure the loaded content cannot tamper with the preload script and
            any Electron APIs being used. This option uses the same technique used by . You
            can access this context in the dev tools by selecting the 'Electron Isolated
            Context' entry in the combo box at the top of the Console tab. This option is
            currently experimental and may change or be removed in future Electron releases.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.WebPreferences.NativeWindowOpen">
            <summary>
            Whether to use native window.open(). Defaults to false. This option is currently experimental.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Entities.WebPreferences.WebviewTag">
            <summary>
            Whether to enable the Webview. Defaults to the value of the nodeIntegration option. The
            preload script configured for the Webview will have node integration enabled
            when it is executed so you should ensure remote/untrusted content is not able to
            create a Webview tag with a possibly malicious preload script.You can use the
            will-attach-webview event on to strip away the preload script and to validate or
            alter the Webview's initial settings.
            </summary>
            <value>
              <c>true</c> if [webview tag]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ElectronNET.API.Entities.WebPreferences.EnableRemoteModule">
            <summary>
            Whether to enable the remote module. Defaults to false.
            </summary>
        </member>
        <member name="T:ElectronNET.API.DisplayBalloonOptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.DisplayBalloonOptions.Icon">
            <summary>
            Gets or sets the icon.
            </summary>
            <value>
            The icon.
            </value>
        </member>
        <member name="P:ElectronNET.API.DisplayBalloonOptions.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>
            The title.
            </value>
        </member>
        <member name="P:ElectronNET.API.DisplayBalloonOptions.Content">
            <summary>
            Gets or sets the content.
            </summary>
            <value>
            The content.
            </value>
        </member>
        <member name="T:ElectronNET.API.SaveDialogOptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.SaveDialogOptions.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>
            The title.
            </value>
        </member>
        <member name="P:ElectronNET.API.SaveDialogOptions.DefaultPath">
            <summary>
            Absolute directory path, absolute file path, or file name to use by default.
            </summary>
        </member>
        <member name="P:ElectronNET.API.SaveDialogOptions.ButtonLabel">
            <summary>
            Custom label for the confirmation button, when left empty the default label will
            be used.
            </summary>
        </member>
        <member name="P:ElectronNET.API.SaveDialogOptions.Filters">
            <summary>
            The filters specifies an array of file types that can be displayed or 
            selected when you want to limit the user to a specific type. For example:
            </summary>
            <example>
            <code>
            new FileFilter[]
            {
             new FileFiler { Name = "Images", Extensions = new string[] { "jpg", "png", "gif" } },
             new FileFiler { Name = "Movies", Extensions = new string[] { "mkv", "avi", "mp4" } },
             new FileFiler { Name = "Custom File Type", Extensions= new string[] {"as" } },
             new FileFiler { Name = "All Files", Extensions= new string[] { "*" } }
            }
            </code>
            </example>
        </member>
        <member name="P:ElectronNET.API.SaveDialogOptions.Message">
            <summary>
            Message to display above text fields.
            </summary>
        </member>
        <member name="P:ElectronNET.API.SaveDialogOptions.NameFieldLabel">
            <summary>
            Custom label for the text displayed in front of the filename text field.
            </summary>
        </member>
        <member name="P:ElectronNET.API.SaveDialogOptions.ShowsTagField">
            <summary>
            Show the tags input box, defaults to true.
            </summary>
        </member>
        <member name="T:ElectronNET.API.TrayClickEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.TrayClickEventArgs.AltKey">
            <summary>
            Gets or sets a value indicating whether [alt key].
            </summary>
            <value>
              <c>true</c> if [alt key]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ElectronNET.API.TrayClickEventArgs.ShiftKey">
            <summary>
            Gets or sets a value indicating whether [shift key].
            </summary>
            <value>
              <c>true</c> if [shift key]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ElectronNET.API.TrayClickEventArgs.CtrlKey">
            <summary>
            Gets or sets a value indicating whether [control key].
            </summary>
            <value>
              <c>true</c> if [control key]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ElectronNET.API.TrayClickEventArgs.MetaKey">
            <summary>
            Gets or sets a value indicating whether [meta key].
            </summary>
            <value>
              <c>true</c> if [meta key]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:ElectronNET.API.Events">
            <summary>
            Generic Event Consumers for Electron Modules
            </summary>
        </member>
        <member name="M:ElectronNET.API.Events.On(System.String,System.String,System.Action)">
            <summary>
            Subscribe to an unmapped electron event.
            </summary>
            <param name="moduleName">The name of the module, e.g. app, dock, etc...</param>
            <param name="eventName">The name of the event</param>
            <param name="fn">The event handler</param>
        </member>
        <member name="M:ElectronNET.API.Events.On(System.String,System.String,System.Action{System.Object})">
            <summary>
            Subscribe to an unmapped electron event.
            </summary>
            <param name="moduleName">The name of the module, e.g. app, dock, etc...</param>
            <param name="eventName">The name of the event</param>
            <param name="fn">The event handler</param>
        </member>
        <member name="M:ElectronNET.API.Events.On(System.String,System.String,Quobject.EngineIoClientDotNet.ComponentEmitter.IListener)">
            <summary>
            Subscribe to an unmapped electron event.
            </summary>
            <param name="moduleName">The name of the module, e.g. app, dock, etc...</param>
            <param name="eventName">The name of the event</param>
            <param name="fn">The event handler</param>
        </member>
        <member name="M:ElectronNET.API.Events.Once(System.String,System.String,System.Action)">
            <summary>
            Subscribe to an unmapped electron event.
            </summary>
            <param name="moduleName">The name of the module, e.g. app, dock, etc...</param>
            <param name="eventName">The name of the event</param>
            <param name="fn">The event handler</param>
        </member>
        <member name="M:ElectronNET.API.Events.Once(System.String,System.String,System.Action{System.Object})">
            <summary>
            Subscribe to an unmapped electron event.
            </summary>
            <param name="moduleName">The name of the module, e.g. app, dock, etc...</param>
            <param name="eventName">The name of the event</param>
            <param name="fn">The event handler</param>
        </member>
        <member name="M:ElectronNET.API.Events.Once(System.String,System.String,Quobject.EngineIoClientDotNet.ComponentEmitter.IListener)">
            <summary>
            Subscribe to an unmapped electron event.
            </summary>
            <param name="moduleName">The name of the module, e.g. app, dock, etc...</param>
            <param name="eventName">The name of the event</param>
            <param name="fn">The event handler</param>
        </member>
        <member name="T:ElectronNET.API.GlobalShortcut">
            <summary>
            Detect keyboard events when the application does not have keyboard focus.
            </summary>
        </member>
        <member name="M:ElectronNET.API.GlobalShortcut.Register(System.String,System.Action)">
            <summary>
            Registers a global shortcut of accelerator. 
            The callback is called when the registered shortcut is pressed by the user.
            
            When the accelerator is already taken by other applications, this call will 
            silently fail.This behavior is intended by operating systems, since they don’t
            want applications to fight for global shortcuts.
            </summary>
        </member>
        <member name="M:ElectronNET.API.GlobalShortcut.IsRegisteredAsync(System.String)">
            <summary>
            When the accelerator is already taken by other applications, 
            this call will still return false. This behavior is intended by operating systems,
            since they don’t want applications to fight for global shortcuts.
            </summary>
            <returns>Whether this application has registered accelerator.</returns>
        </member>
        <member name="M:ElectronNET.API.GlobalShortcut.Unregister(System.String)">
            <summary>
            Unregisters the global shortcut of accelerator.
            </summary>
        </member>
        <member name="M:ElectronNET.API.GlobalShortcut.UnregisterAll">
            <summary>
            Unregisters all of the global shortcuts.
            </summary>
        </member>
        <member name="T:ElectronNET.API.HostHook">
            <summary>
            Allows you to execute native JavaScript/TypeScript code from the host process.
            
            It is only possible if the Electron.NET CLI has previously added an 
            ElectronHostHook directory:
            <c>electronize add HostHook</c>
            </summary>
        </member>
        <member name="M:ElectronNET.API.HostHook.Call(System.String,System.Object[])">
            <summary>
            Execute native JavaScript/TypeScript code.
            </summary>
            <param name="socketEventName">Socket name registered on the host.</param>
            <param name="arguments">Optional parameters.</param>
        </member>
        <member name="M:ElectronNET.API.HostHook.CallAsync``1(System.String,System.Object[])">
            <summary>
            Execute native JavaScript/TypeScript code.
            </summary>
            <typeparam name="T">Results from the executed host code.</typeparam>
            <param name="socketEventName">Socket name registered on the host.</param>
            <param name="arguments">Optional parameters.</param>
            <returns></returns>
        </member>
        <member name="T:ElectronNET.API.HybridSupport">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.HybridSupport.IsElectronActive">
            <summary>
            Gets a value indicating whether this instance is electron active.
            </summary>
            <value>
              <c>true</c> if this instance is electron active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:ElectronNET.API.IpcMain">
            <summary>
            Communicate asynchronously from the main process to renderer processes.
            </summary>
        </member>
        <member name="M:ElectronNET.API.IpcMain.On(System.String,System.Action{System.Object})">
            <summary>
             Listens to channel, when a new message arrives listener would be called with 
             listener(event, args...).
            </summary>
            <param name="channel">Channelname.</param>
            <param name="listener">Callback Method.</param>
        </member>
        <member name="M:ElectronNET.API.IpcMain.OnSync(System.String,System.Func{System.Object,System.Object})">
            <summary>
            Send a message to the renderer process synchronously via channel, 
            you can also send arbitrary arguments.
            
            Note: Sending a synchronous message will block the whole renderer process,
            unless you know what you are doing you should never use it.
            </summary>
            <param name="channel"></param>
            <param name="listener"></param>
        </member>
        <member name="M:ElectronNET.API.IpcMain.Once(System.String,System.Action{System.Object})">
            <summary>
            Adds a one time listener method for the event. This listener is invoked only
             the next time a message is sent to channel, after which it is removed.
            </summary>
            <param name="channel">Channelname.</param>
            <param name="listener">Callback Method.</param>
        </member>
        <member name="M:ElectronNET.API.IpcMain.RemoveAllListeners(System.String)">
            <summary>
            Removes listeners of the specified channel.
            </summary>
            <param name="channel">Channelname.</param>
        </member>
        <member name="M:ElectronNET.API.IpcMain.Send(ElectronNET.API.BrowserWindow,System.String,System.Object[])">
            <summary>
            Send a message to the renderer process asynchronously via channel, you can also send
            arbitrary arguments. Arguments will be serialized in JSON internally and hence
            no functions or prototype chain will be included. The renderer process handles it by
            listening for channel with ipcRenderer module.
            </summary>
            <param name="browserWindow">BrowserWindow with channel.</param>
            <param name="channel">Channelname.</param>
            <param name="data">Arguments data.</param>
        </member>
        <member name="T:ElectronNET.API.LifetimeServiceHost">
            <summary>
            Base class that reports if ASP.NET Core has fully started.
            </summary>
        </member>
        <member name="M:ElectronNET.API.LifetimeServiceHost.StartAsync(System.Threading.CancellationToken)">
            <summary>
            Triggered when the application host is ready to start the service.
            </summary>
            <param name="cancellationToken">Indicates that the start process has been aborted.</param>
        </member>
        <member name="M:ElectronNET.API.LifetimeServiceHost.StopAsync(System.Threading.CancellationToken)">
            <summary>
            Triggered when the application host is performing a graceful shutdown.
            </summary>
            <param name="cancellationToken">Indicates that the shutdown process should no longer be graceful.</param>
        </member>
        <member name="T:ElectronNET.API.Menu">
            <summary>
            Create native application menus and context menus.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Menu.MenuItems">
            <summary>
            Gets the menu items.
            </summary>
            <value>
            The menu items.
            </value>
        </member>
        <member name="M:ElectronNET.API.Menu.SetApplicationMenu(ElectronNET.API.Entities.MenuItem[])">
            <summary>
            Sets the application menu.
            </summary>
            <param name="menuItems">The menu items.</param>
        </member>
        <member name="P:ElectronNET.API.Menu.ContextMenuItems">
            <summary>
            Gets the context menu items.
            </summary>
            <value>
            The context menu items.
            </value>
        </member>
        <member name="M:ElectronNET.API.Menu.SetContextMenu(ElectronNET.API.BrowserWindow,ElectronNET.API.Entities.MenuItem[])">
            <summary>
            Sets the context menu.
            </summary>
            <param name="browserWindow">The browser window.</param>
            <param name="menuItems">The menu items.</param>
        </member>
        <member name="M:ElectronNET.API.Menu.ContextMenuPopup(ElectronNET.API.BrowserWindow)">
            <summary>
            Contexts the menu popup.
            </summary>
            <param name="browserWindow">The browser window.</param>
        </member>
        <member name="T:ElectronNET.API.NativeTheme">
            <summary>
            Read and respond to changes in Chromium's native color theme.
            </summary>
        </member>
        <member name="M:ElectronNET.API.NativeTheme.SetThemeSource(ElectronNET.API.Entities.ThemeSourceMode)">
            <summary>
            Setting this property to <see cref="F:ElectronNET.API.Entities.ThemeSourceMode.System"/> will remove the override and everything will be reset to the OS default. By default 'ThemeSource' is <see cref="F:ElectronNET.API.Entities.ThemeSourceMode.System"/>.
            <para/>
            Settings this property to <see cref="F:ElectronNET.API.Entities.ThemeSourceMode.Dark"/> will have the following effects:
            <list type="bullet">
            <item>
            <description><see cref="M:ElectronNET.API.NativeTheme.ShouldUseDarkColorsAsync"/> will be <see langword="true"/> when accessed</description>
            </item>
            <item>
            <description>Any UI Electron renders on Linux and Windows including context menus, devtools, etc. will use the dark UI.</description>
            </item>
            <item>
            <description>Any UI the OS renders on macOS including menus, window frames, etc. will use the dark UI.</description>
            </item>
            <item>
            <description>The 'prefers-color-scheme' CSS query will match 'dark' mode.</description>
            </item>
            <item>
            <description>The 'updated' event will be emitted</description>
            </item> 
            </list>
            <para/>
            Settings this property to <see cref="F:ElectronNET.API.Entities.ThemeSourceMode.Light"/> will have the following effects:
            <list type="bullet">
            <item>
            <description><see cref="M:ElectronNET.API.NativeTheme.ShouldUseDarkColorsAsync"/> will be <see langword="false"/> when accessed</description>
            </item>
            <item>
            <description>Any UI Electron renders on Linux and Windows including context menus, devtools, etc. will use the light UI.</description>
            </item>
            <item>
            <description>Any UI the OS renders on macOS including menus, window frames, etc. will use the light UI.</description>
            </item>
            <item>
            <description>The 'prefers-color-scheme' CSS query will match 'light' mode.</description>
            </item>
            <item>
            <description>The 'updated' event will be emitted</description>
            </item>
            </list> 
            The usage of this property should align with a classic "dark mode" state machine in your application where the user has three options.
            <para/>
            <list type="bullet">
            <item>
            <description>Follow OS: SetThemeSource(ThemeSourceMode.System);</description>
            </item>
            <item>
            <description>Dark Mode: SetThemeSource(ThemeSourceMode.Dark);</description>
            </item>
            <item>
            <description>Light Mode: SetThemeSource(ThemeSourceMode.Light);</description>
            </item>
            </list>
            Your application should then always use <see cref="M:ElectronNET.API.NativeTheme.ShouldUseDarkColorsAsync"/> to determine what CSS to apply.
            </summary>
            <param name="themeSourceMode">The new ThemeSource.</param>
        </member>
        <member name="M:ElectronNET.API.NativeTheme.GetThemeSourceAsync">
            <summary>
            A <see cref="T:ElectronNET.API.Entities.ThemeSourceMode"/> property that can be <see cref="F:ElectronNET.API.Entities.ThemeSourceMode.System"/>, <see cref="F:ElectronNET.API.Entities.ThemeSourceMode.Light"/> or <see cref="F:ElectronNET.API.Entities.ThemeSourceMode.Dark"/>. It is used to override (<seealso cref="M:ElectronNET.API.NativeTheme.SetThemeSource(ElectronNET.API.Entities.ThemeSourceMode)"/>) and
            supercede the value that Chromium has chosen to use internally.
            </summary>
        </member>
        <member name="M:ElectronNET.API.NativeTheme.ShouldUseDarkColorsAsync">
            <summary>
            A <see cref="T:System.Boolean"/> for if the OS / Chromium currently has a dark mode enabled or is
            being instructed to show a dark-style UI. If you want to modify this value you
            should use <see cref="M:ElectronNET.API.NativeTheme.SetThemeSource(ElectronNET.API.Entities.ThemeSourceMode)"/>.
            </summary>
        </member>
        <member name="M:ElectronNET.API.NativeTheme.ShouldUseHighContrastColorsAsync">
            <summary>
            A <see cref="T:System.Boolean"/> for if the OS / Chromium currently has high-contrast mode enabled or is
            being instructed to show a high-contrast UI.
            </summary>
        </member>
        <member name="M:ElectronNET.API.NativeTheme.ShouldUseInvertedColorSchemeAsync">
            <summary>
            A <see cref="T:System.Boolean"/> for if the OS / Chromium currently has an inverted color scheme or is
            being instructed to use an inverted color scheme.
            </summary>
        </member>
        <member name="E:ElectronNET.API.NativeTheme.Updated">
            <summary>
            Emitted when something in the underlying NativeTheme has changed. This normally means that either the value of <see cref="M:ElectronNET.API.NativeTheme.ShouldUseDarkColorsAsync"/>,
            <see cref="M:ElectronNET.API.NativeTheme.ShouldUseHighContrastColorsAsync"/> or <see cref="M:ElectronNET.API.NativeTheme.ShouldUseInvertedColorSchemeAsync"/> has changed. You will have to check them to determine which one has changed.
            </summary>
        </member>
        <member name="T:ElectronNET.API.Notification">
            <summary>
            Create OS desktop notifications
            </summary>
        </member>
        <member name="M:ElectronNET.API.Notification.Show(ElectronNET.API.Entities.NotificationOptions)">
            <summary>
            Create OS desktop notifications
            </summary>
            <param name="notificationOptions"></param>
        </member>
        <member name="M:ElectronNET.API.Notification.IsSupportedAsync">
            <summary>
            Whether or not desktop notifications are supported on the current system.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ElectronNET.API.PowerMonitor">
            <summary>
            Monitor power state changes..
            </summary>
        </member>
        <member name="E:ElectronNET.API.PowerMonitor.OnLockScreen">
            <summary>
            Emitted when the system is about to lock the screen. 
            </summary>
        </member>
        <member name="E:ElectronNET.API.PowerMonitor.OnUnLockScreen">
            <summary>
            Emitted when the system is about to unlock the screen. 
            </summary>
        </member>
        <member name="E:ElectronNET.API.PowerMonitor.OnSuspend">
            <summary>
            Emitted when the system is suspending.
            </summary>
        </member>
        <member name="E:ElectronNET.API.PowerMonitor.OnResume">
            <summary>
            Emitted when system is resuming.
            </summary>
        </member>
        <member name="E:ElectronNET.API.PowerMonitor.OnAC">
            <summary>
            Emitted when the system changes to AC power.
            </summary>
        </member>
        <member name="E:ElectronNET.API.PowerMonitor.OnBattery">
            <summary>
            Emitted when system changes to battery power.
            </summary>
        </member>
        <member name="E:ElectronNET.API.PowerMonitor.OnShutdown">
            <summary>
            Emitted when the system is about to reboot or shut down. If the event handler
            invokes `e.preventDefault()`, Electron will attempt to delay system shutdown in
            order for the app to exit cleanly.If `e.preventDefault()` is called, the app
            should exit as soon as possible by calling something like `app.quit()`.
            </summary>
        </member>
        <member name="T:ElectronNET.API.QuitEventArgs">
            <summary>
            Event arguments for the <see cref="E:ElectronNET.API.App.BeforeQuit"/> / <see cref="E:ElectronNET.API.App.WillQuit"/> event.
            </summary>
        </member>
        <member name="M:ElectronNET.API.QuitEventArgs.PreventDefault">
            <summary>
            Will prevent the default behaviour, which is terminating the application.
            </summary>
        </member>
        <member name="T:ElectronNET.API.Screen">
            <summary>
            Retrieve information about screen size, displays, cursor position, etc.
            </summary>
        </member>
        <member name="E:ElectronNET.API.Screen.OnDisplayAdded">
            <summary>
            Emitted when an new Display has been added.
            </summary>
        </member>
        <member name="E:ElectronNET.API.Screen.OnDisplayRemoved">
            <summary>
            Emitted when oldDisplay has been removed.
            </summary>
        </member>
        <member name="E:ElectronNET.API.Screen.OnDisplayMetricsChanged">
            <summary>
            Emitted when one or more metrics change in a display. 
            The changedMetrics is an array of strings that describe the changes. 
            Possible changes are bounds, workArea, scaleFactor and rotation.
            </summary>
        </member>
        <member name="M:ElectronNET.API.Screen.GetCursorScreenPointAsync">
            <summary>
            The current absolute position of the mouse pointer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ElectronNET.API.Screen.GetMenuBarHeightAsync">
            <summary>
            macOS: The height of the menu bar in pixels.
            </summary>
            <returns>The height of the menu bar in pixels.</returns>
        </member>
        <member name="M:ElectronNET.API.Screen.GetPrimaryDisplayAsync">
            <summary>
            The primary display.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ElectronNET.API.Screen.GetAllDisplaysAsync">
            <summary>
            An array of displays that are currently available.
            </summary>
            <returns>An array of displays that are currently available.</returns>
        </member>
        <member name="M:ElectronNET.API.Screen.GetDisplayNearestPointAsync(ElectronNET.API.Entities.Point)">
            <summary>
            The display nearest the specified point.
            </summary>
            <returns>The display nearest the specified point.</returns>
        </member>
        <member name="M:ElectronNET.API.Screen.GetDisplayMatchingAsync(ElectronNET.API.Entities.Rectangle)">
            <summary>
            The display that most closely intersects the provided bounds.
            </summary>
            <param name="rectangle"></param>
            <returns>The display that most closely intersects the provided bounds.</returns>
        </member>
        <member name="T:ElectronNET.API.ServiceCollectionExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:ElectronNET.API.ServiceCollectionExtensions.AddElectron(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds the <see cref="T:ElectronNET.API.Electron"/> Members to the Service Collection
            </summary>
        </member>
        <member name="T:ElectronNET.API.Session">
            <summary>
            Manage browser sessions, cookies, cache, proxy settings, etc.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Session.Id">
            <summary>
            Gets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:ElectronNET.API.Session.Cookies">
            <summary>
            Query and modify a session's cookies.
            </summary>
        </member>
        <member name="M:ElectronNET.API.Session.AllowNTLMCredentialsForDomains(System.String)">
            <summary>
            Dynamically sets whether to always send credentials for HTTP NTLM or Negotiate authentication.
            </summary>
            <param name="domains">A comma-separated list of servers for which integrated authentication is enabled.</param>
        </member>
        <member name="M:ElectronNET.API.Session.ClearAuthCacheAsync(ElectronNET.API.Entities.RemovePassword)">
            <summary>
            Clears the session’s HTTP authentication cache.
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:ElectronNET.API.Session.ClearAuthCacheAsync">
            <summary>
            Clears the session’s HTTP authentication cache.
            </summary>
        </member>
        <member name="M:ElectronNET.API.Session.ClearCacheAsync">
            <summary>
            Clears the session’s HTTP cache.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ElectronNET.API.Session.ClearHostResolverCacheAsync">
            <summary>
            Clears the host resolver cache.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ElectronNET.API.Session.ClearStorageDataAsync">
            <summary>
            Clears the data of web storages.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ElectronNET.API.Session.ClearStorageDataAsync(ElectronNET.API.Entities.ClearStorageDataOptions)">
            <summary>
            Clears the data of web storages.
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:ElectronNET.API.Session.CreateInterruptedDownload(ElectronNET.API.Entities.CreateInterruptedDownloadOptions)">
            <summary>
            Allows resuming cancelled or interrupted downloads from previous Session. The
            API will generate a DownloadItem that can be accessed with the will-download
            event. The DownloadItem will not have any WebContents associated with it and the
            initial state will be interrupted. The download will start only when the resume
            API is called on the DownloadItem.
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:ElectronNET.API.Session.DisableNetworkEmulation">
            <summary>
            Disables any network emulation already active for the session. Resets to the
            original network configuration.
            </summary>
        </member>
        <member name="M:ElectronNET.API.Session.EnableNetworkEmulation(ElectronNET.API.Entities.EnableNetworkEmulationOptions)">
            <summary>
            Emulates network with the given configuration for the session.
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:ElectronNET.API.Session.FlushStorageData">
            <summary>
            Writes any unwritten DOMStorage data to disk.
            </summary>
        </member>
        <member name="M:ElectronNET.API.Session.GetBlobDataAsync(System.String)">
            <summary>
            
            </summary>
            <param name="identifier"></param>
            <returns></returns>
        </member>
        <member name="M:ElectronNET.API.Session.GetCacheSizeAsync">
            <summary>
            Get session's current cache size.
            </summary>
            <returns>Callback is invoked with the session's current cache size.</returns>
        </member>
        <member name="M:ElectronNET.API.Session.GetPreloadsAsync">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ElectronNET.API.Session.GetUserAgent">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ElectronNET.API.Session.ResolveProxyAsync(System.String)">
            <summary>
            Resolves the proxy information for url. The callback will be called with
            callback(proxy) when the request is performed.
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:ElectronNET.API.Session.SetDownloadPath(System.String)">
            <summary>
            Sets download saving directory. By default, the download directory will be the
            Downloads under the respective app folder.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:ElectronNET.API.Session.SetPreloads(System.String[])">
            <summary>
            Adds scripts that will be executed on ALL web contents that are associated with
            this session just before normal preload scripts run.
            </summary>
            <param name="preloads"></param>
        </member>
        <member name="M:ElectronNET.API.Session.SetProxyAsync(ElectronNET.API.Entities.ProxyConfig)">
            <summary>
            Sets the proxy settings. When pacScript and proxyRules are provided together,
            the proxyRules option is ignored and pacScript configuration is applied.
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:ElectronNET.API.Session.SetUserAgent(System.String)">
            <summary>
            Overrides the userAgent for this session. This doesn't affect existing WebContents, and
            each WebContents can use webContents.setUserAgent to override the session-wide
            user agent.
            </summary>
            <param name="userAgent"></param>
        </member>
        <member name="M:ElectronNET.API.Session.SetUserAgent(System.String,System.String)">
            <summary>
            Overrides the userAgent and acceptLanguages for this session. The
            acceptLanguages must a comma separated ordered list of language codes, for
            example "en-US,fr,de,ko,zh-CN,ja". This doesn't affect existing WebContents, and
            each WebContents can use webContents.setUserAgent to override the session-wide
            user agent.
            </summary>
            <param name="userAgent"></param>
            <param name="acceptLanguages">The
            acceptLanguages must a comma separated ordered list of language codes, for
            example "en-US,fr,de,ko,zh-CN,ja".</param>
        </member>
        <member name="T:ElectronNET.API.Shell">
            <summary>
            Manage files and URLs using their default applications.
            </summary>
        </member>
        <member name="M:ElectronNET.API.Shell.ShowItemInFolderAsync(System.String)">
            <summary>
            Show the given file in a file manager. If possible, select the file.
            </summary>
            <param name="fullPath">The full path to the directory / file.</param>
        </member>
        <member name="M:ElectronNET.API.Shell.OpenPathAsync(System.String)">
            <summary>
            Open the given file in the desktop's default manner.
            </summary>
            <param name="path">The path to the directory / file.</param>
            <returns>The error message corresponding to the failure if a failure occurred, otherwise <see cref="F:System.String.Empty"/>.</returns>
        </member>
        <member name="M:ElectronNET.API.Shell.OpenExternalAsync(System.String)">
            <summary>
            Open the given external protocol URL in the desktop’s default manner. 
            (For example, mailto: URLs in the user’s default mail agent).
            </summary>
            <param name="url">Max 2081 characters on windows.</param>
            <returns>The error message corresponding to the failure if a failure occurred, otherwise <see cref="F:System.String.Empty"/>.</returns>
        </member>
        <member name="M:ElectronNET.API.Shell.OpenExternalAsync(System.String,ElectronNET.API.Entities.OpenExternalOptions)">
            <summary>
            Open the given external protocol URL in the desktop’s default manner. 
            (For example, mailto: URLs in the user’s default mail agent).
            </summary>
            <param name="url">Max 2081 characters on windows.</param>
            <param name="options">Controls the behavior of OpenExternal.</param>
            <returns>The error message corresponding to the failure if a failure occurred, otherwise <see cref="F:System.String.Empty"/>.</returns>
        </member>
        <member name="M:ElectronNET.API.Shell.MoveItemToTrashAsync(System.String,System.Boolean)">
            <summary>
            Move the given file to trash and returns a <see cref="T:System.Boolean"/> status for the operation.
            </summary>
            <param name="fullPath">The full path to the directory / file.</param>
            <param name="deleteOnFail">Whether or not to unilaterally remove the item if the Trash is disabled or unsupported on the volume.</param>
            <returns> Whether the item was successfully moved to the trash.</returns>
        </member>
        <member name="M:ElectronNET.API.Shell.Beep">
            <summary>
            Play the beep sound.
            </summary>
        </member>
        <member name="M:ElectronNET.API.Shell.WriteShortcutLinkAsync(System.String,ElectronNET.API.Entities.ShortcutLinkOperation,ElectronNET.API.Entities.ShortcutDetails)">
            <summary>
            Creates or updates a shortcut link at shortcutPath.
            </summary>
            <param name="shortcutPath">The path to the shortcut.</param>
            <param name="operation">Default is <see cref="F:ElectronNET.API.Entities.ShortcutLinkOperation.Create"/></param>
            <param name="options">Structure of a shortcut.</param>
            <returns>Whether the shortcut was created successfully.</returns>
        </member>
        <member name="M:ElectronNET.API.Shell.ReadShortcutLinkAsync(System.String)">
            <summary>
            Resolves the shortcut link at shortcutPath.
            An exception will be thrown when any error happens.
            </summary>
            <param name="shortcutPath">The path tot the shortcut.</param>
            <returns><see cref="T:ElectronNET.API.Entities.ShortcutDetails"/> of the shortcut.</returns>
        </member>
        <member name="T:ElectronNET.API.Tray">
            <summary>
            Add icons and context menus to the system's notification area.
            </summary>
        </member>
        <member name="E:ElectronNET.API.Tray.OnClick">
            <summary>
            Emitted when the tray icon is clicked.
            </summary>
        </member>
        <member name="E:ElectronNET.API.Tray.OnRightClick">
            <summary>
            macOS, Windows: Emitted when the tray icon is right clicked.
            </summary>
        </member>
        <member name="E:ElectronNET.API.Tray.OnDoubleClick">
            <summary>
            macOS, Windows: Emitted when the tray icon is double clicked.
            </summary>
        </member>
        <member name="E:ElectronNET.API.Tray.OnBalloonShow">
            <summary>
            Windows: Emitted when the tray balloon shows.
            </summary>
        </member>
        <member name="E:ElectronNET.API.Tray.OnBalloonClick">
            <summary>
            Windows: Emitted when the tray balloon is clicked.
            </summary>
        </member>
        <member name="E:ElectronNET.API.Tray.OnBalloonClosed">
            <summary>
            Windows: Emitted when the tray balloon is closed 
            because of timeout or user manually closes it.
            </summary>
        </member>
        <member name="P:ElectronNET.API.Tray.MenuItems">
            <summary>
            Gets the menu items.
            </summary>
            <value>
            The menu items.
            </value>
        </member>
        <member name="M:ElectronNET.API.Tray.Show(System.String,ElectronNET.API.Entities.MenuItem)">
            <summary>
            Shows the Traybar.
            </summary>
            <param name="image">The image.</param>
            <param name="menuItem">The menu item.</param>
        </member>
        <member name="M:ElectronNET.API.Tray.Show(System.String,ElectronNET.API.Entities.MenuItem[])">
            <summary>
            Shows the Traybar.
            </summary>
            <param name="image">The image.</param>
            <param name="menuItems">The menu items.</param>
        </member>
        <member name="M:ElectronNET.API.Tray.Show(System.String)">
            <summary>
            Shows the Traybar (empty).
            </summary>
            <param name="image">The image.</param>
        </member>
        <member name="M:ElectronNET.API.Tray.Destroy">
            <summary>
            Destroys the tray icon immediately.
            </summary>
        </member>
        <member name="M:ElectronNET.API.Tray.SetImage(System.String)">
            <summary>
            Sets the image associated with this tray icon.
            </summary>
            <param name="image"></param>
        </member>
        <member name="M:ElectronNET.API.Tray.SetPressedImage(System.String)">
            <summary>
            Sets the image associated with this tray icon when pressed on macOS.
            </summary>
            <param name="image"></param>
        </member>
        <member name="M:ElectronNET.API.Tray.SetToolTip(System.String)">
            <summary>
            Sets the hover text for this tray icon.
            </summary>
            <param name="toolTip"></param>
        </member>
        <member name="M:ElectronNET.API.Tray.SetTitle(System.String)">
            <summary>
            macOS: Sets the title displayed aside of the tray icon in the status bar.
            </summary>
            <param name="title"></param>
        </member>
        <member name="M:ElectronNET.API.Tray.DisplayBalloon(ElectronNET.API.DisplayBalloonOptions)">
            <summary>
            Windows: Displays a tray balloon.
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:ElectronNET.API.Tray.IsDestroyedAsync">
            <summary>
            Whether the tray icon is destroyed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ElectronNET.API.Tray.On(System.String,System.Action)">
            <summary>
            Subscribe to an unmapped event on the <see cref="T:ElectronNET.API.Tray"/> module.
            </summary>
            <param name="eventName">The event name</param>
            <param name="fn">The handler</param>
        </member>
        <member name="M:ElectronNET.API.Tray.On(System.String,System.Action{System.Object})">
            <summary>
            Subscribe to an unmapped event on the <see cref="T:ElectronNET.API.Tray"/> module.
            </summary>
            <param name="eventName">The event name</param>
            <param name="fn">The handler</param>
        </member>
        <member name="M:ElectronNET.API.Tray.Once(System.String,System.Action)">
            <summary>
            Subscribe to an unmapped event on the <see cref="T:ElectronNET.API.Tray"/> module once.
            </summary>
            <param name="eventName">The event name</param>
            <param name="fn">The handler</param>
        </member>
        <member name="M:ElectronNET.API.Tray.Once(System.String,System.Action{System.Object})">
            <summary>
            Subscribe to an unmapped event on the <see cref="T:ElectronNET.API.Tray"/> module once.
            </summary>
            <param name="eventName">The event name</param>
            <param name="fn">The handler</param>
        </member>
        <member name="T:ElectronNET.API.WebContents">
            <summary>
            Render and control web pages.
            </summary>
        </member>
        <member name="P:ElectronNET.API.WebContents.Id">
            <summary>
            Gets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:ElectronNET.API.WebContents.Session">
            <summary>
            Manage browser sessions, cookies, cache, proxy settings, etc.
            </summary>
        </member>
        <member name="E:ElectronNET.API.WebContents.OnCrashed">
            <summary>
            Emitted when the renderer process crashes or is killed.
            </summary>
        </member>
        <member name="E:ElectronNET.API.WebContents.OnDidFinishLoad">
            <summary>
            Emitted when the navigation is done, i.e. the spinner of the tab has
            stopped spinning, and the onload event was dispatched.
            </summary>
        </member>
        <member name="M:ElectronNET.API.WebContents.OpenDevTools">
            <summary>
            Opens the devtools.
            </summary>
        </member>
        <member name="M:ElectronNET.API.WebContents.OpenDevTools(ElectronNET.API.Entities.OpenDevToolsOptions)">
            <summary>
            Opens the devtools.
            </summary>
            <param name="openDevToolsOptions"></param>
        </member>
        <member name="M:ElectronNET.API.WebContents.GetPrintersAsync">
            <summary>
            Get system printers.
            </summary>
            <returns>printers</returns>
        </member>
        <member name="M:ElectronNET.API.WebContents.PrintAsync(ElectronNET.API.Entities.PrintOptions)">
            <summary>
            Prints window's web page.
            </summary>
            <param name="options"></param>
            <returns>success</returns>
        </member>
        <member name="M:ElectronNET.API.WebContents.PrintToPDFAsync(System.String,ElectronNET.API.Entities.PrintToPDFOptions)">
            <summary>
            Prints window's web page as PDF with Chromium's preview printing custom
            settings.The landscape will be ignored if @page CSS at-rule is used in the web page. 
            By default, an empty options will be regarded as: Use page-break-before: always; 
            CSS style to force to print to a new page.
            </summary>
            <param name="path"></param>
            <param name="options"></param>
            <returns>success</returns>
        </member>
        <member name="M:ElectronNET.API.WebContents.GetUrl">
            <summary>
            Is used to get the Url of the loaded page.
            It's usefull if a web-server redirects you and you need to know where it redirects. For instance, It's useful in case of Implicit Authorization.
            </summary>
            <returns>URL of the loaded page</returns>
        </member>
        <member name="M:ElectronNET.API.WebContents.LoadURLAsync(System.String)">
             <summary>
             The async method will resolve when the page has finished loading, 
             and rejects if the page fails to load.
             
             A noop rejection handler is already attached, which avoids unhandled rejection
             errors.
            
             Loads the `url` in the window. The `url` must contain the protocol prefix, e.g.
             the `http://` or `file://`. If the load should bypass http cache then use the
             `pragma` header to achieve it.
             </summary>
             <param name="url"></param>
        </member>
        <member name="M:ElectronNET.API.WebContents.LoadURLAsync(System.String,ElectronNET.API.Entities.LoadURLOptions)">
             <summary>
             The async method will resolve when the page has finished loading, 
             and rejects if the page fails to load.
             
             A noop rejection handler is already attached, which avoids unhandled rejection
             errors.
            
             Loads the `url` in the window. The `url` must contain the protocol prefix, e.g.
             the `http://` or `file://`. If the load should bypass http cache then use the
             `pragma` header to achieve it.
             </summary>
             <param name="url"></param>
             <param name="options"></param>
        </member>
        <member name="T:ElectronNET.API.WebHostBuilderExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:ElectronNET.API.WebHostBuilderExtensions.UseElectron(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.String[])">
            <summary>
            Use a Electron support for this .NET Core Project.
            </summary>
            <param name="builder">The builder.</param>
            <param name="args">The arguments.</param>
            <returns></returns>
        </member>
        <member name="T:ElectronNET.API.WindowManager">
            <summary>
            
            </summary>
        </member>
        <member name="P:ElectronNET.API.WindowManager.IsQuitOnWindowAllClosed">
            <summary>
            Quit when all windows are closed. (Default is true)
            </summary>
            <value>
              <c>true</c> if [quit window all closed]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ElectronNET.API.WindowManager.BrowserWindows">
            <summary>
            Gets the browser windows.
            </summary>
            <value>
            The browser windows.
            </value>
        </member>
        <member name="P:ElectronNET.API.WindowManager.BrowserViews">
            <summary>
            Gets the browser views.
            </summary>
            <value>
            The browser view.
            </value>
        </member>
        <member name="M:ElectronNET.API.WindowManager.CreateWindowAsync(System.String)">
            <summary>
            Creates the window asynchronous.
            </summary>
            <param name="loadUrl">The load URL.</param>
            <returns></returns>
        </member>
        <member name="M:ElectronNET.API.WindowManager.CreateWindowAsync(ElectronNET.API.Entities.BrowserWindowOptions,System.String)">
            <summary>
            Creates the window asynchronous.
            </summary>
            <param name="options">The options.</param>
            <param name="loadUrl">The load URL.</param>
            <returns></returns>
        </member>
        <member name="M:ElectronNET.API.WindowManager.CreateBrowserViewAsync">
            <summary>
            A BrowserView can be used to embed additional web content into a BrowserWindow. 
            It is like a child window, except that it is positioned relative to its owning window. 
            It is meant to be an alternative to the webview tag.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ElectronNET.API.WindowManager.CreateBrowserViewAsync(ElectronNET.API.Entities.BrowserViewConstructorOptions)">
            <summary>
            A BrowserView can be used to embed additional web content into a BrowserWindow. 
            It is like a child window, except that it is positioned relative to its owning window. 
            It is meant to be an alternative to the webview tag.
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
    </members>
</doc>
